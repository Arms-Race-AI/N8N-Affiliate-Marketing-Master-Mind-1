{
    "nodes":  [
                  {
                      "parameters":  {
                                         "command":  "bash -lc \u0027\\nset -euo pipefail\\nDIR=/data/agency/datastore\\nSEC=/data/agency/secrets\\nmkdir -p \"$DIR\" \"$SEC\"\\n[ -f \"$DIR/channels.csv\" ] || printf \"%s\\n\" \"channel_id,platform,niche,language,active,weight,drive_folder_id,visibility,tags\" \u003e \"$DIR/channels.csv\"\\n[ -f \"$DIR/quota_log.csv\" ] || printf \"%s\\n\" \"ts,method,units\" \u003e \"$DIR/quota_log.csv\"\\n[ -f \"$DIR/published.csv\" ] || printf \"%s\\n\" \"ts,platform,slug,title,url,status,short_link\" \u003e \"$DIR/published.csv\"\\n[ -f \"$DIR/weights.csv\" ] || printf \"%s\\n\" \"channel_id,weight\" \u003e \"$DIR/weights.csv\"\\n[ -f \"$DIR/links.csv\" ] || printf \"%s\\n\" \"ts,code,long_url,program,niche\" \u003e \"$DIR/links.csv\"\\nmkdir -p /data/agency/{queue/{youtube,tiktok,instagram,pinterest,angles,hooks,threads,email,referrals,challenges,pingbacks},logs,dlq,runs,locks}\\nmkdir -p /data/agency/queue/email/{drafts,variants,sequences,html,deliverability,esp,qa}\\n[ -f \"$SEC/youtube_access_token.txt\" ] || :\\necho READY\u0027"
                                     },
                      "id":  "906bc2b6-fc42-48ff-9b0a-50a44d9dfafa",
                      "name":  "Ensure Datastore + Dirs",
                      "type":  "n8n-nodes-base.executeCommand",
                      "typeVersion":  1,
                      "position":  [
                                       -19968,
                                       5160
                                   ]
                  },
                  {
                      "parameters":  {
                                         "triggerTimes":  {
                                                              "item":  [
                                                                           {
                                                                               "hour":  20,
                                                                               "minute":  10
                                                                           }
                                                                       ]
                                                          }
                                     },
                      "id":  "4b163bc8-31be-4ba8-b992-fc595b98432d",
                      "name":  "Run 20:10 BKK (Targets 06:10 PT)",
                      "type":  "n8n-nodes-base.cron",
                      "typeVersion":  1,
                      "position":  [
                                       -20880,
                                       5056
                                   ]
                  },
                  {
                      "parameters":  {
                                         "triggerTimes":  {
                                                              "item":  [
                                                                           {
                                                                               "hour":  22,
                                                                               "minute":  10
                                                                           }
                                                                       ]
                                                          }
                                     },
                      "id":  "3bf13af3-5244-499a-8279-47de51f84288",
                      "name":  "Run 22:10 BKK (Targets 08:10 PT)",
                      "type":  "n8n-nodes-base.cron",
                      "typeVersion":  1,
                      "position":  [
                                       -20880,
                                       5248
                                   ]
                  },
                  {
                      "parameters":  {
                                         "triggerTimes":  {
                                                              "item":  [
                                                                           {
                                                                               "hour":  0,
                                                                               "minute":  10
                                                                           }
                                                                       ]
                                                          }
                                     },
                      "id":  "8a453d42-71aa-40e6-a0aa-e4e1ae71db7e",
                      "name":  "Run 00:10 BKK (Targets 10:10 PT)",
                      "type":  "n8n-nodes-base.cron",
                      "typeVersion":  1,
                      "position":  [
                                       -20880,
                                       5440
                                   ]
                  },
                  {
                      "parameters":  {
                                         "assignments":  {
                                                             "assignments":  [
                                                                                 {
                                                                                     "id":  "run_id",
                                                                                     "name":  "run_id",
                                                                                     "type":  "string",
                                                                                     "value":  "={{ $now.toISO() + \u0027-\u0027 + $random.uuid() }}"
                                                                                 },
                                                                                 {
                                                                                     "id":  "start_ts",
                                                                                     "name":  "start_ts",
                                                                                     "type":  "string",
                                                                                     "value":  "={{ $now.toISO() }}"
                                                                                 }
                                                                             ]
                                                         },
                                         "options":  {

                                                     }
                                     },
                      "id":  "691c0c30-bf2e-4b5c-89f2-0096728ed10a",
                      "name":  "Run Manifest",
                      "type":  "n8n-nodes-base.set",
                      "typeVersion":  3.4,
                      "position":  [
                                       -20656,
                                       5160
                                   ]
                  },
                  {
                      "parameters":  {
                                         "command":  "bash -lc \u0027mkdir -p /data/agency/locks; exec 9\u003e /data/agency/locks/content.lock \u0026\u0026 flock -n 9 || { echo BUSY; exit 3; }; echo GOT\u0027"
                                     },
                      "id":  "88062db3-cd97-48e5-9b91-6d7149af820f",
                      "name":  "Acquire Lock",
                      "type":  "n8n-nodes-base.executeCommand",
                      "typeVersion":  1,
                      "position":  [
                                       -20432,
                                       5160
                                   ]
                  },
                  {
                      "parameters":  {
                                         "conditions":  {
                                                            "string":  [
                                                                           {
                                                                               "value1":  "={{$json[\"stdout\"]||\"\"}}",
                                                                               "operation":  "contains",
                                                                               "value2":  "GOT"
                                                                           }
                                                                       ]
                                                        }
                                     },
                      "id":  "d651fd41-99b7-4745-b8c9-a93e9d65978b",
                      "name":  "Lock Acquired?",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "position":  [
                                       -20208,
                                       5160
                                   ]
                  },
                  {
                      "parameters":  {
                                         "filePath":  "/data/agency/datastore/channels.csv"
                                     },
                      "id":  "c6212bce-dedd-4eeb-a152-a650f8c04dd5",
                      "name":  "Read channels.csv",
                      "type":  "n8n-nodes-base.readBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -19760,
                                       4920
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "function parseCSV(str){const out=[],line=[];let q=false;for(let i=0;i\u003cstr.length;i++){const c=str[i];if(c===\u0027\\r\u0027)continue;if(c===\u0027\\n\u0027){out.push(line.join(\u0027\u0027));line.length=0;q=false;continue;}if(c===\u0027\"\u0027){if(q\u0026\u0026str[i+1]===\u0027\"\u0027){line.push(\u0027\"\u0027);i++;}else q=!q;}else line.push(c);}if(line.length)out.push(line.join(\u0027\u0027));return out.map(row=\u003e{const a=[];let s=\u0027\u0027,qq=false;for(let i=0;i\u003crow.length;i++){const ch=row[i];if(ch===\u0027\"\u0027){if(qq\u0026\u0026row[i+1]===\u0027\"\u0027){s+=\u0027\"\u0027;i++;}else qq=!qq;}else if(ch===\u0027,\u0027\u0026\u0026!qq){a.push(s);s=\u0027\u0027;}else s+=ch;}a.push(s);return a;});}\nconst b=items[0].binary?.data?.data||items[0].binary?.data;const buf=Buffer.from(b,\u0027base64\u0027);const txt=buf.toString(\u0027utf8\u0027);const rows=parseCSV(txt);if(!rows.length)return [];\nconst h=rows[0].map(x=\u003eString(x||\u0027\u0027).trim());const idx=k=\u003eh.indexOf(k);\nconst out=[];for(let i=1;i\u003crows.length;i++){const r=rows[i];if(!r)continue;const o={channel_id:r[idx(\u0027channel_id\u0027)]||\u0027\u0027,platform:String(r[idx(\u0027platform\u0027)]||\u0027youtube\u0027).toLowerCase(),niche:r[idx(\u0027niche\u0027)]||\u0027\u0027,language:r[idx(\u0027language\u0027)]||\u0027en-US\u0027,active:String(r[idx(\u0027active\u0027)]||\u0027true\u0027).toLowerCase()===\u0027true\u0027,weight:Number(r[idx(\u0027weight\u0027)]||1),drive_folder_id:r[idx(\u0027drive_folder_id\u0027)]||\u0027\u0027,visibility:(r[idx(\u0027visibility\u0027)]||\u0027private\u0027).toLowerCase(),tags:String(r[idx(\u0027tags\u0027)]||\u0027\u0027).split(\u0027,\u0027).map(s=\u003es.trim()).filter(Boolean)};if(o.channel_id\u0026\u0026o.niche)out.push({json:o});}\nreturn out;"
                                     },
                      "id":  "f1d24285-14e7-4682-bc3c-fca7efc686cc",
                      "name":  "CSV â†’ JSON (Channels)",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -19536,
                                       4920
                                   ]
                  },
                  {
                      "parameters":  {
                                         "conditions":  {
                                                            "boolean":  [
                                                                            {
                                                                                "value1":  "={{$json.active===true}}",
                                                                                "operation":  "isTrue"
                                                                            }
                                                                        ]
                                                        }
                                     },
                      "id":  "0b0725f1-5056-4964-895e-23430dcd01ec",
                      "name":  "IF Active?",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "position":  [
                                       -19312,
                                       4920
                                   ]
                  },
                  {
                      "parameters":  {
                                         "filePath":  "/data/agency/datastore/quota_log.csv"
                                     },
                      "id":  "d84112da-62a6-4b22-a842-ddda5eadcbb4",
                      "name":  "Read quota_log.csv",
                      "type":  "n8n-nodes-base.readBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -19088,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "function parseCSV(str){const out=[],line=[];let q=false;for(let i=0;i\u003cstr.length;i++){const c=str[i];if(c===\u0027\\r\u0027)continue;if(c===\u0027\\n\u0027){out.push(line.join(\u0027\u0027));line.length=0;q=false;continue;}if(c===\u0027\"\u0027){if(q\u0026\u0026str[i+1]===\u0027\"\u0027){line.push(\u0027\"\u0027);i++;}else q=!q;}else line.push(c);}if(line.length)out.push(line.join(\u0027\u0027));return out.map(row=\u003e{const a=[];let s=\u0027\u0027,qq=false;for(let i=0;i\u003crow.length;i++){const ch=row[i];if(ch===\u0027\"\u0027){if(qq\u0026\u0026row[i+1]===\u0027\"\u0027){s+=\u0027\"\u0027;i++;}else qq=!qq;}else if(ch===\u0027,\u0027\u0026\u0026!qq){a.push(s);s=\u0027\u0027;}else s+=ch;}a.push(s);return a;});}\nfunction ptNow(){return new Date(new Date().toLocaleString(\u0027en-US\u0027,{timeZone:\u0027America/Los_Angeles\u0027}));}\nconst b=items[0].binary?.data?.data||items[0].binary?.data;const buf=Buffer.from(b,\u0027base64\u0027);const txt=buf.toString(\u0027utf8\u0027);const rows=parseCSV(txt);if(!rows.length)return[{json:{today:new Date(ptNow()).toISOString().slice(0,10),used:0,remaining:10000,slots:3,runsLeft:3}}];const h=rows[0].map(x=\u003eString(x||\u0027\u0027).trim());const idx=k=\u003eh.indexOf(k);const today=new Date(ptNow()).toISOString().slice(0,10);let used=0;for(let i=1;i\u003crows.length;i++){const r=rows[i];if(!r||!r[idx(\u0027ts\u0027)])continue;if(String(r[idx(\u0027ts\u0027)]).slice(0,10)===today)used+=Number(r[idx(\u0027units\u0027)]||0);}const LIMIT=10000;const remaining=Math.max(0,LIMIT-used);const hour=ptNow().getHours();const runsLeft=(hour\u003c12?3:(hour\u003c18?2:1));const slots=Math.max(0,Math.floor((remaining/1600)/runsLeft));return[{json:{today,used,remaining,slots,runsLeft}}];"
                                     },
                      "id":  "5f8ea1ea-87e2-462b-bfb6-d956817f3bd7",
                      "name":  "Quota Summary (PT)",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -18864,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const inItems=Array.isArray(items)?items:[];let quota=null;const channels=[];for(const it of inItems){const j=it.json||{};if(Object.prototype.hasOwnProperty.call(j,\u0027slots\u0027)\u0026\u0026Object.prototype.hasOwnProperty.call(j,\u0027remaining\u0027)){quota=j;}else{if(j\u0026\u0026j.active===true)channels.push(j);}}if(!quota){return channels.map(c=\u003e({json:{...c,yt_selected:false,run_ts:new Date().toISOString(),slots:0}}));}const slots=Number(quota.slots||0);channels.sort((a,b)=\u003e(b.weight||0)-(a.weight||0));const chosen=new Set(channels.slice(0,Math.min(slots,channels.length)).map(c=\u003ec.channel_id));return channels.map(c=\u003e({json:{...c,yt_selected:chosen.has(c.channel_id),run_ts:new Date().toISOString(),slots}}));"
                                     },
                      "id":  "edb24f1c-5621-4a8b-9f07-c59b0eb2a2e0",
                      "name":  "Select YT Slots",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -18640,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "batchSize":  1,
                                         "options":  {

                                                     }
                                     },
                      "id":  "785b982d-1f70-4a79-9cfb-224bce7b3483",
                      "name":  "Split Channels (1)",
                      "type":  "n8n-nodes-base.splitInBatches",
                      "typeVersion":  1,
                      "position":  [
                                       -18416,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "url":  "={{ \u0027https://news.google.com/rss/search?q=\u0027 + encodeURIComponent($json.niche) + \u0027\u0026hl=en-US\u0026gl=US\u0026ceid=US:en\u0027 }}",
                                         "responseFormat":  "string",
                                         "options":  {
                                                         "timeout":  30000
                                                     }
                                     },
                      "id":  "c93f20e1-10d1-4185-a6ba-9d184feb848a",
                      "name":  "Google News RSS",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "position":  [
                                       -18192,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const xml=String(items[0].json||\u0027\u0027);const titles=[...xml.matchAll(/\u003ctitle\u003e([^\u003c]+)\u003c\\/title\u003e/g)].map(m=\u003em[1]).slice(1,25);const links=[...xml.matchAll(/\u003clink\u003e([^\u003c]+)\u003c\\/link\u003e/g)].map(m=\u003em[1]).filter(u=\u003e!u.includes(\u0027news.google.com/rss\u0027)).slice(0,24);const pairs=titles.map((t,i)=\u003e({title:t,url:links[i]||\u0027\u0027}));return[{json:{niche:$json.niche,candidates:pairs}}];"
                                     },
                      "id":  "a2c419be-2b9d-4614-8950-4f7185d95ed9",
                      "name":  "Parse RSS",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -17968,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "requestMethod":  "POST",
                                         "url":  "http://ollama:11434/api/generate",
                                         "jsonParameters":  true,
                                         "options":  {
                                                         "timeout":  120000
                                                     },
                                         "bodyParametersJson":  "={\"model\":\"llama3.1:8b\",\"prompt\":\"Niche: {{$json.niche}}. Google leads: {{$json.candidates.map(c=\u003ec.title).join(\\\" | \\\")}}. Hacker News sparks: {{($json.research \u0026\u0026 $json.research.hackerNews ? $json.research.hackerNews.map(h=\u003eh.title).join(\\\" | \\\") : \\\"\\\")}}. Reddit sparks: {{($json.research \u0026\u0026 $json.research.reddit ? $json.research.reddit.map(r=\u003er.title).join(\\\" | \\\") : \\\"\\\")}}. StackOverflow hot: {{($json.research \u0026\u0026 $json.research.stackOverflow ? $json.research.stackOverflow.map(q=\u003eq.title).join(\\\" | \\\") : \\\"\\\")}}. Pain synthesis: {{($json.researchInsights \u0026\u0026 $json.researchInsights.painPoints ? $json.researchInsights.painPoints.join(\\\" | \\\") : \\\"\\\")}}. Propose 9 evergreen, high-CTR topics with hook, 8-12 bullet outline, target persona, CTA energy, tags. Output JSON array of {title,hook,outline,tags,persona,ctaEnergy}.\",\"stream\":false}"
                                     },
                      "id":  "13b297b3-2425-403d-98d2-5a78a4fdb57a",
                      "name":  "Ollama: Propose 9 Topics",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "position":  [
                                       -17744,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const raw=items[0].json;const txt=raw.response||raw.choices?.[0]?.text||\u0027[]\u0027;let arr=[];try{arr=JSON.parse(txt)}catch(e){arr=[];}const pick=arr[0]||{title:`${$json.niche} daily`,hook:\u0027\u0027,outline:\u0027Intro\\nP1\\nP2\\nCTA\u0027,tags:[]};const slug=(pick.title||\u0027post\u0027).toLowerCase().replace(/[^a-z0-9]+/g,\u0027-\u0027).replace(/(^-|-$)/g,\u0027\u0027).slice(0,80);return[{json:{...$json,pick,slug,title:pick.title}}];"
                                     },
                      "id":  "bf1db758-f0e9-4131-801b-7d722a9c605d",
                      "name":  "Pick Topic",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -17520,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "assignments":  {
                                                             "assignments":  [
                                                                                 {
                                                                                     "id":  "program",
                                                                                     "name":  "program",
                                                                                     "type":  "string",
                                                                                     "value":  "={{ $json.niche \u0026\u0026 $json.niche.toLowerCase().includes(\u0027yacht\u0027) ? \u0027BOATBOOKINGS\u0027 : \u0027VILLIERS\u0027 }}"
                                                                                 },
                                                                                 {
                                                                                     "id":  "deeplink",
                                                                                     "name":  "deeplink",
                                                                                     "type":  "string",
                                                                                     "value":  "={{ $json.program===\u0027VILLIERS\u0027 ? \u0027https://www.villiersjets.com/?a=YOUR_ID\u0027 : \u0027https://www.boatbookings.com/?ref=YOUR_ID\u0027 }}"
                                                                                 },
                                                                                 {
                                                                                     "id":  "utm_source",
                                                                                     "name":  "utm_source",
                                                                                     "type":  "string",
                                                                                     "value":  "={{ $json.platform || \u0027youtube\u0027 }}"
                                                                                 },
                                                                                 {
                                                                                     "id":  "utm_campaign",
                                                                                     "name":  "utm_campaign",
                                                                                     "type":  "string",
                                                                                     "value":  "={{ ($json.niche || \u0027default\u0027).toLowerCase().replace(/[^a-z0-9]+/g,\u0027-\u0027) }}"
                                                                                 },
                                                                                 {
                                                                                     "id":  "disclosure",
                                                                                     "name":  "disclosure",
                                                                                     "type":  "string",
                                                                                     "value":  "This video contains affiliate links. We may earn a commission."
                                                                                 }
                                                                             ]
                                                         },
                                         "options":  {

                                                     }
                                     },
                      "id":  "c1d48b10-32ef-40b5-85cd-435d83db3cf3",
                      "name":  "Offer Builder + Disclosure",
                      "type":  "n8n-nodes-base.set",
                      "typeVersion":  3.4,
                      "position":  [
                                       -17296,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "requestMethod":  "POST",
                                         "url":  "http://ollama:11434/api/generate",
                                         "jsonParameters":  true,
                                         "options":  {
                                                         "timeout":  180000
                                                     },
                                         "bodyParametersJson":  "={\"model\":\"llama3.1:8b\",\"prompt\":\"Write a 900-1200 word YouTube script in {{$json.language||\u0027en-US\u0027}}. Title: {{$json.title}}. Hook: {{$json.pick.hook}}. Outline: {{$json.pick.outline}}. Include in the first paragraph one CTA pointing to {{$json.deeplink}} with UTM {{$json.utm_source}}/{{$json.utm_campaign}}. Tone pragmatic, high signal. Include a 10-word title, 160-char description, and JSON block at end {\\\"title\\\",\\\"description\\\",\\\"tags\\\"}.\",\"stream\":false}"
                                     },
                      "id":  "2b06a776-0458-442c-91cc-e84c71f2044e",
                      "name":  "Ollama: Draft Script",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "position":  [
                                       -17072,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const text=items[0].json.response||items[0].json.choices?.[0]?.text||\u0027\u0027;const metaMatch=text.match(/\\{\\s*\\\"title\\\"[\\s\\S]*\\}\\s*$/);let meta={title:$json.title,description:\u0027\u0027,tags:$json.pick?.tags||[]};let body=text;if(metaMatch){try{meta=JSON.parse(metaMatch[0])}catch(e){}body=text.replace(metaMatch[0],\u0027\u0027).trim();}const title=meta.title||$json.title;const slug=$json.slug;return[{json:{...$json,script:body,meta:{...meta,tags:Array.from(new Set([...(meta.tags||[]),...($json.pick?.tags||[])]))},title,slug}}];"
                                     },
                      "id":  "f8a6c70c-708d-4dd4-92c3-1234704d819e",
                      "name":  "Pack Script + Meta",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -16848,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const u=new URL($json.deeplink||\u0027\u0027);u.searchParams.set(\u0027utm_source\u0027,$json.utm_source||\u0027youtube\u0027);u.searchParams.set(\u0027utm_medium\u0027,$json.platform||\u0027video\u0027);u.searchParams.set(\u0027utm_campaign\u0027,$json.utm_campaign||\u0027default\u0027);const long_url=u.toString();const code=(($json.slug||\u0027\u0027).replace(/[^a-z0-9]/g,\u0027\u0027).slice(0,10)||$random.uuid().replace(/-/g,\u0027\u0027).slice(0,10))+String($now.toUNIX());const short_link=\u0027https://\u0027+($env.PUBLIC_SITE||\u0027example.com\u0027)+\u0027/go/\u0027+code;return[{json:{...$json,long_url,code,short_link}}];"
                                     },
                      "id":  "c37873c1-262c-46a7-b759-08a284c9584b",
                      "name":  "Build CTA Link",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -16624,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "assignments":  {
                                                             "assignments":  [
                                                                                 {
                                                                                     "id":  "ts",
                                                                                     "name":  "ts",
                                                                                     "type":  "string",
                                                                                     "value":  "={{ $now.toISO() }}"
                                                                                 },
                                                                                 {
                                                                                     "id":  "code",
                                                                                     "name":  "code",
                                                                                     "type":  "string",
                                                                                     "value":  "={{ $json.code }}"
                                                                                 },
                                                                                 {
                                                                                     "id":  "long_url",
                                                                                     "name":  "long_url",
                                                                                     "type":  "string",
                                                                                     "value":  "={{ $json.long_url }}"
                                                                                 },
                                                                                 {
                                                                                     "id":  "program",
                                                                                     "name":  "program",
                                                                                     "type":  "string",
                                                                                     "value":  "={{ $json.program }}"
                                                                                 },
                                                                                 {
                                                                                     "id":  "niche",
                                                                                     "name":  "niche",
                                                                                     "type":  "string",
                                                                                     "value":  "={{ $json.niche }}"
                                                                                 }
                                                                             ]
                                                         },
                                         "options":  {

                                                     }
                                     },
                      "id":  "277d3ad0-0590-47b6-9b25-2c5db7309a6a",
                      "name":  "Shortlink Row",
                      "type":  "n8n-nodes-base.set",
                      "typeVersion":  3.4,
                      "position":  [
                                       -16416,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "options":  {

                                                     }
                                     },
                      "id":  "0a71873a-5dc4-4c4f-bc01-1fcef2c48227",
                      "name":  "Shortlink â†’ File",
                      "type":  "n8n-nodes-base.convertToFile",
                      "typeVersion":  1,
                      "position":  [
                                       -16208,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "fileName":  "=/data/agency/datastore/links.csv",
                                         "options":  {

                                                     }
                                     },
                      "id":  "45ca8c25-ba26-421c-a2ff-74bcd0f3a7d1",
                      "name":  "Append â†’ links.csv",
                      "type":  "n8n-nodes-base.writeBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -16000,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const t=$json.script||\u0027\u0027;const words=t.split(/\\s+/).filter(Boolean).length;const sentences=Math.max(1,(t.match(/[.!?]+\\s/g)||[]).length+1);const chars=t.replace(/\\s/g,\u0027\u0027).length;const asl=words/sentences;const awl=chars/Math.max(1,words);const readability=Math.max(0,100-(asl*2+awl*10));const toxicity=0;return[{json:{...$json,readability,toxicity,quality_ok:(readability\u003e=45\u0026\u0026toxicity\u003c=0.15)}}];"
                                     },
                      "id":  "fdfae8b3-1c4e-4989-9fc6-d76f05479e8e",
                      "name":  "Quality Gate (Local)",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -18880,
                                       5600
                                   ]
                  },
                  {
                      "parameters":  {
                                         "conditions":  {
                                                            "boolean":  [
                                                                            {
                                                                                "value1":  "={{$json.quality_ok===true}}",
                                                                                "operation":  "isTrue"
                                                                            }
                                                                        ]
                                                        }
                                     },
                      "id":  "2744c7e3-c4cc-4d85-97e9-8822287ba839",
                      "name":  "Quality OK?",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "position":  [
                                       -18656,
                                       5600
                                   ]
                  },
                  {
                      "parameters":  {
                                         "assignments":  {
                                                             "assignments":  [
                                                                                 {
                                                                                     "id":  "reason",
                                                                                     "name":  "reason",
                                                                                     "type":  "string",
                                                                                     "value":  "quality_fail"
                                                                                 }
                                                                             ]
                                                         },
                                         "options":  {

                                                     }
                                     },
                      "id":  "9035736f-ab82-4a9c-a2e0-9565750ea03a",
                      "name":  "DLQ Envelope",
                      "type":  "n8n-nodes-base.set",
                      "typeVersion":  3.4,
                      "position":  [
                                       -18432,
                                       5744
                                   ]
                  },
                  {
                      "parameters":  {
                                         "options":  {

                                                     }
                                     },
                      "id":  "2e8238cf-a9fc-4247-ae1c-39282c36f304",
                      "name":  "DLQ â†’ File",
                      "type":  "n8n-nodes-base.convertToFile",
                      "typeVersion":  1,
                      "position":  [
                                       -18208,
                                       5744
                                   ]
                  },
                  {
                      "parameters":  {
                                         "fileName":  "=/data/agency/dlq/{{$json.slug}}_{{$now.toUNIX()}}.json",
                                         "options":  {

                                                     }
                                     },
                      "id":  "012aefc5-9b4e-4ab5-940c-aff606bfeffd",
                      "name":  "Write DLQ",
                      "type":  "n8n-nodes-base.writeBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -17984,
                                       5744
                                   ]
                  },
                  {
                      "parameters":  {
                                         "assignments":  {
                                                             "assignments":  [
                                                                                 {
                                                                                     "id":  "ts",
                                                                                     "name":  "ts",
                                                                                     "type":  "string",
                                                                                     "value":  "={{ $now.toISO() }}"
                                                                                 },
                                                                                 {
                                                                                     "id":  "stage",
                                                                                     "name":  "stage",
                                                                                     "type":  "string",
                                                                                     "value":  "={{ $json.stage || 'quality_gate' }}"
                                                                                 },
                                                                                 {
                                                                                     "id":  "status",
                                                                                     "name":  "status",
                                                                                     "type":  "string",
                                                                                     "value":  "={{ $json.status || ($json.reason ? 'rejected' : 'ok') }}"
                                                                                 }
                                                                             ]
                                                         },
                                         "options":  {

                                                     }
                                     },
                      "id":  "821ba9bb-e4ab-4037-83d7-e93416638850",
                      "name":  "Log Line",
                      "type":  "n8n-nodes-base.set",
                      "typeVersion":  3.4,
                      "position":  [
                                       -18432,
                                       5568
                                   ]
                  },
                  {
                      "parameters":  {
                                         "options":  {

                                                     }
                                     },
                      "id":  "086bad52-cd41-4354-b306-c5c9faee8057",
                      "name":  "Log â†’ NDJSON",
                      "type":  "n8n-nodes-base.convertToFile",
                      "typeVersion":  1,
                      "position":  [
                                       -18208,
                                       5568
                                   ]
                  },
                  {
                      "parameters":  {
                                         "fileName":  "=/data/agency/logs/{{$now.toFormat(\u0027yyyy-LL-dd\u0027)}}.ndjson",
                                         "options":  {

                                                     }
                                     },
                      "id":  "27b8dcad-3a59-4012-82df-f5d38f32a305",
                      "name":  "Append Log",
                      "type":  "n8n-nodes-base.writeBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -17984,
                                       5568
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const item=items[0] || {};const incomingJson=item.json || {};const incomingBinary=item.binary || {};const slug=(incomingJson.slug || \`script-${Date.now()}\`).toString();const script=incomingJson.script || '';const scriptPath=`/data/agency/${slug}.txt`;const buffer=Buffer.from(script, 'utf8');return [{json: {...incomingJson, script_path: scriptPath}, binary: {...incomingBinary, data: {data: buffer.toString('base64'), mimeType: 'text/plain', fileName: `${slug}.txt`}}}];"
                                     },
                      "id":  "2e7c8f6e-d0d5-4f89-8b48-b5c1f0f1ffbc",
                      "name":  "Script → Binary",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -17856,
                                       5568
                                   ]
                  },
                  {
                      "parameters":  {
                                         "fileName":  "={{$json.script_path}}",
                                         "options":  {

                                                     }
                                     },
                      "id":  "573e9dc8-5ac7-4fce-8fee-15bea05fc420",
                      "name":  "Write /data script",
                      "type":  "n8n-nodes-base.writeBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -17616,
                                       5568
                                   ]
                  },
                  {
                      "parameters":  {
                                         "command":  "bash -lc \u0027IMG=\"/data/agency/{{$json.slug}}.png\"; magick -size 1920x1080 xc:#0f0f0f -fill white -gravity center -pointsize 64 -annotate +0+0 \"{{$json.title.replace(/\\\"/g, \"\\\\\\\"\")}}\" \"$IMG\" \u003e/dev/null 2\u003e\u00261 \u0026\u0026 echo $IMG\u0027"
                                     },
                      "id":  "e418b5ab-c76b-4e5d-b215-cdc9c8c4bf8c",
                      "name":  "Thumbnail (magick)",
                      "type":  "n8n-nodes-base.executeCommand",
                      "typeVersion":  1,
                      "position":  [
                                       -17392,
                                       5376
                                   ]
                  },
                  {
                      "parameters":  {
                                         "command":  "bash -lc \u0027WAV=\"/data/agency/{{$json.slug}}.wav\"; espeak-ng -v en-us -s 170 -p 50 -a 95 -f \"{{$json.script_path}}\" -w \"$WAV\" \u003e/dev/null 2\u003e\u00261 \u0026\u0026 echo $WAV\u0027"
                                     },
                      "id":  "e901256b-a6ba-4757-b0fa-833cf941c19c",
                      "name":  "TTS (espeak-ng) â†’ WAV",
                      "type":  "n8n-nodes-base.executeCommand",
                      "typeVersion":  1,
                      "position":  [
                                       -17392,
                                       5680
                                   ]
                  },
                  {
                      "parameters":  {
                                         "command":  "bash -lc \u0027IMG=\"/data/agency/{{$json.slug}}.png\"; WAV=\"/data/agency/{{$json.slug}}.wav\"; MP4=\"/data/agency/{{$json.slug}}.mp4\"; ffmpeg -y -loop 1 -i \"$IMG\" -i \"$WAV\" -c:v libx264 -tune stillimage -c:a aac -b:a 192k -pix_fmt yuv420p -shortest \"$MP4\" -loglevel error \u0026\u0026 echo $MP4\u0027"
                                     },
                      "id":  "f0b7c204-a5e5-4a13-bec3-832ed51a6b6e",
                      "name":  "Mux to MP",
                      "type":  "n8n-nodes-base.executeCommand",
                      "typeVersion":  1,
                      "position":  [
                                       -17168,
                                       5568
                                   ]
                  },
                  {
                      "parameters":  {
                                         "filePath":  "={{ \u0027/data/agency/\u0027 + $json.slug + \u0027.mp4\u0027 }}"
                                     },
                      "id":  "d28733c9-c473-4a56-8df6-60211c51f461",
                      "name":  "Read MP4 (binary)",
                      "type":  "n8n-nodes-base.readBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -16944,
                                       5568
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const baseTags=$json.meta?.tags||[];const luxe=($json.program===\u0027VILLIERS\u0027||$json.program===\u0027BOATBOOKINGS\u0027)?[\u0027hnwi\u0027,\u0027ultra luxury\u0027,\u0027vip concierge\u0027,\u0027private charter\u0027]:[];const tags=Array.from(new Set([...baseTags,...luxe]));const desc=($json.meta?.description||\u0027\u0027)+\u0027\\n\\n\u0027+\u0027Book now: \u0027+($json.short_link||$json.long_url||\u0027\u0027)+\u0027\\n\\n\u0027+($json.disclosure||\u0027\u0027);return[{json:{title:$json.title,description:desc,tags,visibility:$json.visibility||\u0027private\u0027,platform:$json.platform||\u0027youtube\u0027,yt_selected:$json.yt_selected,slug:$json.slug,short_link:$json.short_link}}];"
                                     },
                      "id":  "135cd42f-5fa7-4076-8931-835bd5cde6d2",
                      "name":  "Set Upload Meta",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -16496,
                                       5472
                                   ]
                  },
                  {
                      "parameters":  {
                                         "mode":  "mergeByPosition",
                                         "options":  {

                                                     }
                                     },
                      "id":  "bbf71452-8886-4107-a369-57408f34a1b1",
                      "name":  "Merge Meta + MP",
                      "type":  "n8n-nodes-base.merge",
                      "typeVersion":  2,
                      "position":  [
                                       -16720,
                                       5568
                                   ]
                  },
                  {
                      "parameters":  {
                                         "filePath":  "/data/agency/secrets/youtube_access_token.txt"
                                     },
                      "id":  "db320605-2efe-4ffa-bcd9-d660762dc573",
                      "name":  "Read YT Token",
                      "type":  "n8n-nodes-base.readBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -16496,
                                       5664
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const b=items[0].binary?.data?.data||items[0].binary?.data;const t=Buffer.from(b,\u0027base64\u0027).toString(\u0027utf8\u0027).trim();return[{json:{...$json,yt_access_token:t}}];"
                                     },
                      "id":  "98aa5e68-a7c0-4601-8e68-a2eee063fc5a",
                      "name":  "Token â†’ JSON",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -16272,
                                       5664
                                   ]
                  },
                  {
                      "parameters":  {
                                         "mode":  "mergeByPosition",
                                         "options":  {

                                                     }
                                     },
                      "id":  "ba219bd4-24d8-4045-8210-c92c56717994",
                      "name":  "Merge With Token",
                      "type":  "n8n-nodes-base.merge",
                      "typeVersion":  2,
                      "position":  [
                                       -16096,
                                       5568
                                   ]
                  },
                  {
                      "parameters":  {
                                         "requestMethod":  "POST",
                                         "url":  "https://www.googleapis.com/upload/youtube/v3/videos?uploadType=resumable\u0026part=snippet,status",
                                         "jsonParameters":  true,
                                         "options":  {
                                                         "timeout":  120000
                                                     },
                                         "bodyParametersJson":  "={\"snippet\":{\"title\":$json.title,\"description\":$json.description,\"tags\":$json.tags||[],\"categoryId\":\"27\"},\"status\":{\"privacyStatus\":$json.visibility||\"private\"}}"
                                     },
                      "id":  "f1ece9ef-30cd-4a71-885b-2ba2452abf53",
                      "name":  "YT Init Resumable",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "position":  [
                                       -15872,
                                       5568
                                   ]
                  },
                  {
                      "parameters":  {
                                         "requestMethod":  "PUT",
                                         "url":  "={{ $json.headers?.location || $json.location || $items(\"YT Init Resumable\",0,0)[0].json.headers?.location }}",
                                         "options":  {
                                                         "timeout":  600000
                                                     },
                                         "headerParametersUi":  {
                                                                    "parameter":  [
                                                                                      {
                                                                                          "name":  "Authorization",
                                                                                          "value":  "={{ \u0027Bearer \u0027 + $json.yt_access_token }}"
                                                                                      },
                                                                                      {
                                                                                          "name":  "Content-Type",
                                                                                          "value":  "video/mp4"
                                                                                      }
                                                                                  ]
                                                                }
                                     },
                      "id":  "51814484-ddae-4f77-a824-c1bf0d87b849",
                      "name":  "YT Upload Chunk (full)",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "position":  [
                                       -15648,
                                       5568
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const res=items[0].json||{};const id=res.id||res.videoId||res.snippet?.resourceId?.videoId||\u0027\u0027;const url=id?`https://youtu.be/${id}`:\u0027\u0027;return[{json:{...$json,yt_video_id:id,yt_url:url,status:id?200:(items[0].statusCode||0)}}];"
                                     },
                      "id":  "baa6d7b2-2c1c-45fa-bc13-c8c1934001f1",
                      "name":  "YT Parse Response",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -15424,
                                       5568
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "return[{json:{ts:new Date().toISOString(),method:\u0027videos.insert\u0027,units:1600}}];"
                                     },
                      "id":  "2f594e88-156f-49a8-b779-6d88571ac312",
                      "name":  "Set Quota Row",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -15200,
                                       5472
                                   ]
                  },
                  {
                      "parameters":  {
                                         "command":  "bash -lc \u0027printf \"%s\\n\" \"{{$json.ts.replace(/\\\"/g,\"\\\\\\\"\")}},{{$json.method}},{{$json.units}}\" \u003e\u003e /data/agency/datastore/quota_log.csv \u0026\u0026 echo OK\u0027"
                                     },
                      "id":  "241044fc-d51b-46f6-9250-e396fbd86e39",
                      "name":  "Append â†’ quota_log.csv",
                      "type":  "n8n-nodes-base.executeCommand",
                      "typeVersion":  1,
                      "position":  [
                                       -14976,
                                       5472
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "return[{json:{ts:new Date().toISOString(),platform:\u0027youtube\u0027,slug:$json.slug,title:$json.title,url:$json.yt_url,status:$json.status||200,short_link:$json.short_link}}];"
                                     },
                      "id":  "d3f7ade3-878c-4345-bdc2-a80939cdf3c1",
                      "name":  "Set Published Row",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -15200,
                                       5136
                                   ]
                  },
                  {
                      "parameters":  {
                                         "command":  "bash -lc \u0027printf \"%s\\n\" \"{{$json.ts.replace(/\\\"/g,\"\\\\\\\"\")}},{{$json.platform}},{{$json.slug}},{{$json.title.replace(/\\\"/g,\"\\\\\\\"\")}},{{$json.url}},{{$json.status}},{{$json.short_link||\"\"}}\" \u003e\u003e /data/agency/datastore/published.csv \u0026\u0026 echo OK\u0027"
                                     },
                      "id":  "c7cc59fb-5dce-4316-b83f-13fd61242fc7",
                      "name":  "Append â†’ published.csv",
                      "type":  "n8n-nodes-base.executeCommand",
                      "typeVersion":  1,
                      "position":  [
                                       -14976,
                                       5136
                                   ]
                  },
                  {
                      "parameters":  {
                                         "assignments":  {
                                                             "assignments":  [
                                                                                 {
                                                                                     "id":  "ts",
                                                                                     "name":  "ts",
                                                                                     "type":  "string",
                                                                                     "value":  "={{ $now.toISO() }}"
                                                                                 },
                                                                                 {
                                                                                     "id":  "program",
                                                                                     "name":  "program",
                                                                                     "type":  "string",
                                                                                     "value":  "={{ $json.program || \u0027UNKNOWN\u0027 }}"
                                                                                 },
                                                                                 {
                                                                                     "id":  "slug",
                                                                                     "name":  "slug",
                                                                                     "type":  "string",
                                                                                     "value":  "={{ $json.slug || \u0027\u0027 }}"
                                                                                 },
                                                                                 {
                                                                                     "id":  "clicks",
                                                                                     "name":  "clicks",
                                                                                     "type":  "number",
                                                                                     "value":  "0"
                                                                                 },
                                                                                 {
                                                                                     "id":  "bookings",
                                                                                     "name":  "bookings",
                                                                                     "type":  "number",
                                                                                     "value":  "0"
                                                                                 },
                                                                                 {
                                                                                     "id":  "revenue",
                                                                                     "name":  "revenue",
                                                                                     "type":  "number",
                                                                                     "value":  "0"
                                                                                 }
                                                                             ]
                                                         },
                                         "options":  {

                                                     }
                                     },
                      "id":  "90426aa8-fa22-4433-9ffc-c50a6979ecc5",
                      "name":  "EPC Row",
                      "type":  "n8n-nodes-base.set",
                      "typeVersion":  3.4,
                      "position":  [
                                       -14624,
                                       5136
                                   ]
                  },
                  {
                      "parameters":  {
                                         "options":  {

                                                     }
                                     },
                      "id":  "12b0cd6f-dc7f-41d1-ae66-2fc88d1de1ba",
                      "name":  "EPC â†’ File",
                      "type":  "n8n-nodes-base.convertToFile",
                      "typeVersion":  1,
                      "position":  [
                                       -14400,
                                       5136
                                   ]
                  },
                  {
                      "parameters":  {
                                         "fileName":  "=/data/agency/datastore/epc.csv",
                                         "options":  {

                                                     }
                                     },
                      "id":  "8dac7a02-91e8-466b-b39f-cdaa344d7a5a",
                      "name":  "Append EPC",
                      "type":  "n8n-nodes-base.writeBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -14176,
                                       5136
                                   ]
                  },
                  {
                      "parameters":  {
                                         "requestMethod":  "POST",
                                         "url":  "={{ ($env.PEERTUBE_URL||\u0027http://127.0.0.1:9000\u0027) + \u0027/api/v1/videos/upload\u0027 }}",
                                         "options":  {
                                                         "timeout":  120000
                                                     },
                                         "headerParametersUi":  {
                                                                    "parameter":  [
                                                                                      {
                                                                                          "name":  "Authorization",
                                                                                          "value":  "={{ \u0027Bearer \u0027 + $env.PEERTUBE_TOKEN }}"
                                                                                      }
                                                                                  ]
                                                                }
                                     },
                      "id":  "dd80122e-8166-40c7-87ab-9cbc706fe297",
                      "name":  "PeerTube Upload",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "position":  [
                                       -13952,
                                       5136
                                   ],
                      "continueOnFail":  true
                  },
                  {
                      "parameters":  {
                                         "requestMethod":  "POST",
                                         "url":  "={{ ($env.BSKY_PDS||\u0027https://bsky.social\u0027) + \u0027/xrpc/com.atproto.repo.createRecord\u0027 }}",
                                         "jsonParameters":  true,
                                         "options":  {
                                                         "timeout":  20000
                                                     },
                                         "bodyParametersJson":  "={\"repo\":\"{{$env.BSKY_HANDLE}}\",\"collection\":\"app.bsky.feed.post\",\"record\":{\"$type\":\"app.bsky.feed.post\",\"text\":\"New video: {{$json.title}}\",\"createdAt\":\"={{new Date().toISOString()}}\"}}"
                                     },
                      "id":  "b3c819b8-456c-4d01-81f1-2be48df11187",
                      "name":  "Bluesky Post",
                      "type":  "n8n-nodes-base.httpRequest",
                      "typeVersion":  1,
                      "position":  [
                                       -13728,
                                       5136
                                   ],
                      "continueOnFail":  true
                  },
                  {
                      "parameters":  {
                                         "filePath":  "/data/agency/datastore/published.csv"
                                     },
                      "id":  "a59f293b-79cf-44b9-8fa8-6fe6dc47d9a1",
                      "name":  "Read published.csv (30d)",
                      "type":  "n8n-nodes-base.readBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -19760,
                                       5376
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "function parseCSV(str){const out=[],line=[];let q=false;for(let i=0;i\u003cstr.length;i++){const c=str[i];if(c===\u0027\\r\u0027)continue;if(c===\u0027\\n\u0027){out.push(line.join(\u0027\u0027));line.length=0;q=false;continue;}if(c===\u0027\"\u0027){if(q\u0026\u0026str[i+1]===\u0027\"\u0027){line.push(\u0027\"\u0027);i++;}else q=!q;}else line.push(c);}if(line.length)out.push(line.join(\u0027\u0027));return out.map(row=\u003e{const a=[];let s=\u0027\u0027,qq=false;for(let i=0;i\u003crow.length;i++){const ch=row[i];if(ch===\u0027\"\u0027){if(qq\u0026\u0026row[i+1]===\u0027\"\u0027){s+=\u0027\"\u0027;i++;}else qq=!qq;}else if(ch===\u0027,\u0027\u0026\u0026!qq){a.push(s);s=\u0027\u0027;}else s+=ch;}a.push(s);return a;});}\nconst b=items[0].binary?.data?.data||items[0].binary?.data;const buf=Buffer.from(b,\u0027base64\u0027);const txt=buf.toString(\u0027utf8\u0027);const rows=parseCSV(txt);if(!rows.length)return[];const h=rows[0].map(x=\u003eString(x||\u0027\u0027).trim());const idx=k=\u003eh.indexOf(k);const cutoff=Date.now()-30*86400000;const score={};for(let i=1;i\u003crows.length;i++){const r=rows[i];if(!r||!r[idx(\u0027ts\u0027)])continue;if(Date.parse(r[idx(\u0027ts\u0027)])\u003ccutoff)continue;const title=r[idx(\u0027title\u0027)]||\u0027\u0027;const ch=(title.split(\u0027 | \u0027)[0]||\u0027\u0027).trim();if(!ch)continue;score[ch]=(score[ch]||0)+1;}return Object.entries(score).map(([channel_id,val])=\u003e({json:{channel_id,weight:Math.max(1,Math.round(val))}}));"
                                     },
                      "id":  "0e6703ae-bf4a-4581-9ade-ab84225255ed",
                      "name":  "Reweight Channels",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -19536,
                                       5376
                                   ]
                  },
                  {
                      "parameters":  {
                                         "command":  "bash -lc \u0027printf \"%s\\n\" \"{{$json.channel_id}},{{$json.weight}}\" \u003e\u003e /data/agency/datastore/weights.csv \u0026\u0026 echo OK\u0027"
                                     },
                      "id":  "aaca7167-9e53-4623-ba97-ef1e83a3a759",
                      "name":  "Update weights.csv",
                      "type":  "n8n-nodes-base.executeCommand",
                      "typeVersion":  1,
                      "position":  [
                                       -19312,
                                       5376
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const base = items[0].json || {};\nconst niche = base.niche || \"affiliate marketing\";\nlet response;\ntry {\n  response = await this.helpers.httpRequest({\n    method: \"GET\",\n    url: `https://hn.algolia.com/api/v1/search?query=${encodeURIComponent(niche)}\u0026tags=story\u0026hitsPerPage=10`,\n    json: true,\n    timeout: 15000,\n  });\n} catch (error) {\n  response = { hits: [] };\n}\nconst hits = Array.isArray(response.hits)\n  ? response.hits.slice(0, 8).map(hit =\u003e ({\n      title: hit.title || hit.story_title || \"HN Trend\",\n      url: hit.url || hit.story_url || `https://news.ycombinator.com/item?id=${hit.objectID}`,\n      points: hit.points || 0,\n    }))\n  : [];\nreturn [\n  {\n    json: {\n      ...base,\n      research: {\n        ...(base.research || {}),\n        hackerNews: hits,\n      },\n    },\n  },\n];"
                                     },
                      "id":  "cece5022-8104-4fae-ab2d-9397eb9c83e9",
                      "name":  "Research: Hacker News",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -17728,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const base = items[0].json || {};\nconst niche = base.niche || \"affiliate marketing\";\nlet response;\ntry {\n  response = await this.helpers.httpRequest({\n    method: \"GET\",\n    url: `https://www.reddit.com/search.json?q=${encodeURIComponent(niche)}\u0026sort=hot\u0026limit=12`,\n    json: true,\n    headers: { \"User-Agent\": \"n8n-labs/1.0 (affiliate-mastermind)\" },\n    timeout: 15000,\n  });\n} catch (error) {\n  response = { data: { children: [] } };\n}\nconst children = response?.data?.children || [];\nconst posts = children\n  .map(entry =\u003e entry?.data || null)\n  .filter(Boolean)\n  .slice(0, 8)\n  .map(post =\u003e ({\n    title: post.title || \"Reddit Insight\",\n    url: `https://www.reddit.com${post.permalink || \"\"}` ,\n    upvotes: post.ups || post.score || 0,\n  }));\nreturn [\n  {\n    json: {\n      ...base,\n      research: {\n        ...(base.research || {}),\n        reddit: posts,\n      },\n    },\n  },\n];"
                                     },
                      "id":  "dc893550-8349-44ed-ae27-8de22c45de0f",
                      "name":  "Research: Reddit Sparks",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -17520,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const base = items[0].json || {};\nconst niche = base.niche || \"marketing\";\nlet response;\ntry {\n  response = await this.helpers.httpRequest({\n    method: \"GET\",\n    url: `https://api.stackexchange.com/2.3/questions?order=desc\u0026sort=hot\u0026tagged=${encodeURIComponent(niche.toLowerCase().replace(/[^a-z0-9]+/g, \"\"))};marketing\u0026site=stackoverflow\u0026pagesize=6`,\n    json: true,\n    timeout: 15000,\n  });\n} catch (error) {\n  response = { items: [] };\n}\nconst itemsList = Array.isArray(response.items) ? response.items : [];\nconst questions = itemsList.slice(0, 6).map(q =\u003e ({\n  title: q.title || \"StackOverflow Topic\",\n  url: q.link,\n  score: q.score || 0,\n}));\nreturn [\n  {\n    json: {\n      ...base,\n      research: {\n        ...(base.research || {}),\n        stackOverflow: questions,\n      },\n    },\n  },\n];"
                                     },
                      "id":  "e5ac4024-6ec3-405f-b4d6-d2288cb6d7aa",
                      "name":  "Research: StackOverflow Hot",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -17312,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const base = items[0].json || {};\nconst research = base.research || {};\nconst pool = [];\n[\"hackerNews\", \"reddit\", \"stackOverflow\"].forEach(key =\u003e {\n  (research[key] || []).forEach(entry =\u003e {\n    if (entry?.title) pool.push(entry.title);\n  });\n});\n(base.candidates || []).forEach(c =\u003e c?.title \u0026\u0026 pool.push(c.title));\nconst clean = pool\n  .map(text =\u003e text.replace(/\\s+/g, \" \").trim())\n  .filter(Boolean);\nconst freq = {};\nclean.forEach(text =\u003e {\n  text\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s]/g, \" \")\n    .split(/\\s+/)\n    .filter(word =\u003e word.length \u003e 4)\n    .forEach(word =\u003e {\n      freq[word] = (freq[word] || 0) + 1;\n    });\n});\nconst topKeywords = Object.entries(freq)\n  .sort((a, b) =\u003e b[1] - a[1])\n  .slice(0, 10)\n  .map(([keyword, score]) =\u003e ({ keyword, score }));\nconst painPoints = clean.slice(0, 12);\nconst emotionalAngles = painPoints.slice(0, 6).map((text, index) =\u003e `Angle ${index + 1}: ${text}`);\nconst actionPrompts = topKeywords.slice(0, 6).map(entry =\u003e `Ask about ${entry.keyword} to unlock urgency.`);\nreturn [\n  {\n    json: {\n      ...base,\n      researchInsights: {\n        painPoints,\n        emotionalAngles,\n        keywordPulses: topKeywords,\n        actionPrompts,\n      },\n    },\n  },\n];"
                                     },
                      "id":  "17a0e0c8-cbb7-44a1-9b84-6dbda3115edf",
                      "name":  "Research: Pain Synthesis",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -17104,
                                       5000
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const base = items[0].json || {};\nconst slug = base.slug || `hook-${Date.now()}`;\nconst scriptSnippet = (base.script || \"\").split(/\\n/).slice(0, 6).join(\" \");\nconst prompt = [\n  \"Invent 10 micro-video hooks with 2s pattern interrupts.\",\n  `Topic: ${base.title || \"Affiliate Wins\"}` ,\n  `Pain pulses: ${(base.researchInsights?.painPoints || []).slice(0, 6).join(\" | \")}` ,\n  `Synopsis: ${scriptSnippet}` ,\n  \"Return JSON array of {hook,patternInterrupt,dopamineDevice,transitionLine}.\",\n].join(\"\\n\");\nlet response;\ntry {\n  response = await this.helpers.httpRequest({\n    method: \"POST\",\n    url: \"http://ollama:11434/api/generate\",\n    json: { model: \"llama3.1:8b\", prompt, stream: false },\n    timeout: 120000,\n  });\n} catch (error) {\n  response = { response: JSON.stringify([{ hook: \"Stop promoting stale offers\", patternInterrupt: \"Hard stop + timer\", dopamineDevice: \"Curiosity gap\", transitionLine: \"Let me show you the playbook\" }]) };\n}\nconst raw = typeof response === \"string\" ? response : (response.response || response.body || JSON.stringify(response));\nlet parsed;\ntry {\n  parsed = JSON.parse(raw);\n  if (!Array.isArray(parsed)) throw new Error(\"non-array\");\n} catch (error) {\n  parsed = [{ hook: raw.slice(0, 200), patternInterrupt: \"Visual cut\", dopamineDevice: \"Status jolt\", transitionLine: \"Stick with me\" }];\n}\nconst record = {\n  slug,\n  generatedAt: new Date().toISOString(),\n  type: \"hookstorm\",\n  hooks: parsed,\n};\nreturn [\n  {\n    json: {\n      ...base,\n      hookstormRecord: record,\n      hookstormPath: `/data/agency/queue/hooks/${slug}.jsonl`,\n    },\n    binary: {\n      data: {\n        data: Buffer.from(JSON.stringify(record) + \"\\n\", \"utf8\").toString(\"base64\"),\n        mimeType: \"application/json\",\n        fileName: `${slug}.jsonl`,\n      },\n    },\n  },\n];"
                                     },
                      "id":  "982c3161-e455-486d-9a1d-3b7bb0ebbbc3",
                      "name":  "Hookstorm Reactor",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -16320,
                                       4800
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const base = items[0].json || {};\nconst slug = base.slug || `thread-${Date.now()}`;\nconst pains = (base.researchInsights?.painPoints || []).slice(0, 5).join(\" | \");\nconst prompt = [\n  \"Draft a 7-post social thread that converts for an affiliate offer.\",\n  `Core title: ${base.title || \"Affiliate Accelerator\"}` ,\n  `Pain statements: ${pains}` ,\n  `CTA link: ${base.short_link || base.long_url || \"https://example.com/offer\"}` ,\n  \"Return JSON {posts:[{headline,body,prompt}],cta:{copy,link}}.\",\n].join(\"\\n\");\nlet response;\ntry {\n  response = await this.helpers.httpRequest({\n    method: \"POST\",\n    url: \"http://ollama:11434/api/generate\",\n    json: { model: \"llama3.1:8b\", prompt, stream: false },\n    timeout: 120000,\n  });\n} catch (error) {\n  response = { response: JSON.stringify({ posts: [{ headline: \"Hook\", body: \"Story\", prompt: \"Drop your takeaway\" }], cta: { copy: \"Grab the playbook\", link: base.short_link || base.long_url || \"https://example.com\" } }) };\n}\nconst raw = typeof response === \"string\" ? response : (response.response || response.body || JSON.stringify(response));\nlet parsed;\ntry {\n  parsed = JSON.parse(raw);\n  if (!parsed.posts) throw new Error(\"missing posts\");\n} catch (error) {\n  parsed = { posts: [{ headline: raw.slice(0, 80), body: raw.slice(80, 380), prompt: \"DM for the toolkit\" }], cta: { copy: \"Grab the playbook\", link: base.short_link || \"https://example.com\" } };\n}\nconst record = {\n  slug,\n  generatedAt: new Date().toISOString(),\n  type: \"thread_kit\",\n  thread: parsed,\n};\nreturn [\n  {\n    json: {\n      ...base,\n      threadRecord: record,\n      threadPath: `/data/agency/queue/threads/${slug}.jsonl`,\n    },\n    binary: {\n      data: {\n        data: Buffer.from(JSON.stringify(record) + \"\\n\", \"utf8\").toString(\"base64\"),\n        mimeType: \"application/json\",\n        fileName: `${slug}.jsonl`,\n      },\n    },\n  },\n];"
                                     },
                      "id":  "2310661a-a0e2-46ec-96e4-a1bdf596bdfe",
                      "name":  "Reflex Thread Kit",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -16320,
                                       4620
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const base = items[0].json || {};\nconst slug = base.slug || `email-${Date.now()}`;\nconst persona = base.pick?.persona || base.meta?.persona || base.persona || \u0027ambitious creator\u0027;\nconst pains = (base.researchInsights?.painPoints || base.research?.painPoints || []).slice(0, 4).join(\u0027 | \u0027);\nconst hooks = (base.hookstormRecord?.hooks || []).slice(0, 4).map(h =\u003e h?.hook || \u0027\u0027).filter(Boolean).join(\u0027 | \u0027);\nconst offer = base.title || \u0027Affiliate Momentum\u0027;\nconst shortLink = base.short_link || base.long_url || \u0027https://example.com/offer\u0027;\nconst prompt = [\n  \u0027Write a 180-220 word direct-response email that converts curiosity to clicks.\u0027,\n  `Offer: ${offer}`,\n  `Persona: ${persona}`,\n  `Key pains: ${pains}`,\n  `Primary hooks: ${hooks}`,\n  `CTA URL: ${shortLink}`,\n  \u0027Output JSON with: subject, preview, lineBreaks (array of paragraphs), CTA {copy,link}, ps, personaAngle, emotionalTone, spamRisks (array), hooksUsed (array), deliverabilityChecklist (array of bullet strings), complianceNotes (array), segment (string), dripIdeas (array of {day,angle,cta}).\u0027,\n].join(\u0027\\n\u0027);\nlet response;\ntry {\n  response = await this.helpers.httpRequest({\n    method: \u0027POST\u0027,\n    url: \u0027http://ollama:11434/api/generate\u0027,\n    json: { model: \u0027llama3.1:8b\u0027, prompt, stream: false },\n    timeout: 120000,\n  });\n} catch (error) {\n  response = {\n    response: JSON.stringify({\n      subject: \u0027These 3 tweaks 3x commissions\u0027,\n      preview: \u0027Quick win email for affiliate uplift\u0027,\n      lineBreaks: [\n        \u0027Hey there — quick win for scaling affiliate payouts without a new offer.\u0027,\n        \u0027We took the same bonus stack the top 2% run and packaged it so you plug it straight into your funnel.\u0027,\n        \u0027Want the walkthrough that tripled EPC in 9 days? Grab it here.\u0027\n      ],\n      cta: { copy: \u0027Steal the bonus stack\u0027, link: shortLink },\n      ps: \u0027Reply BONUS if you want a custom version built for your niche.\u0027,\n      personaAngle: persona,\n      emotionalTone: \u0027urgent-confidence\u0027,\n      spamRisks: [\u0027bonus\u0027, \u0027tripled\u0027],\n      hooksUsed: [\u0027bonus stack\u0027],\n      deliverabilityChecklist: [\u0027Keep subject under 48 chars\u0027, \u0027Use plain-text first send\u0027],\n      complianceNotes: [\u0027Avoid income claims\u0027],\n      segment: persona.toLowerCase().replace(/[^a-z0-9]+/g, \u0027-\u0027),\n      dripIdeas: [\n        { day: 1, angle: \u0027Proof drop\u0027, cta: \u0027Show me the 9-day gain\u0027 },\n        { day: 3, angle: \u0027Behind-the-scenes SOP\u0027, cta: \u0027Send the SOP\u0027 }\n      ],\n    }),\n  };\n}\nconst raw = typeof response === \u0027string\u0027\n  ? response\n  : (response?.response || response?.body || JSON.stringify(response));\nlet parsed;\ntry {\n  parsed = JSON.parse(raw);\n  if (!parsed?.subject) throw new Error(\u0027missing subject\u0027);\n} catch (error) {\n  parsed = {\n    subject: raw.slice(0, 60) || \u0027Unlock this funnel upgrade\u0027,\n    preview: \u0027Quick win email for affiliate uplift\u0027,\n    lineBreaks: [raw.slice(60, 200) || \u0027Your bonus stack is ready.\u0027],\n    cta: { copy: \u0027Claim the stack\u0027, link: shortLink },\n    ps: \u0027Hit reply for the bonus pack.\u0027,\n    personaAngle: persona,\n    emotionalTone: \u0027pragmatic-high-signal\u0027,\n    spamRisks: [],\n    hooksUsed: [],\n    deliverabilityChecklist: [\u0027Keep text-to-link ratio above 80%\u0027],\n    complianceNotes: [],\n    segment: persona.toLowerCase().replace(/[^a-z0-9]+/g, \u0027-\u0027),\n    dripIdeas: [],\n  };\n}\nconst safeArray = (value, fallback = []) =\u003e\n  Array.isArray(value) ? value : (value ? [value] : fallback);\nconst email = {\n  subject: parsed.subject,\n  preview: parsed.preview || parsed.previewText || \u0027\u0027,\n  lineBreaks: safeArray(parsed.lineBreaks, safeArray(parsed.body)),\n  cta: parsed.cta || { copy: \u0027Unlock now\u0027, link: shortLink },\n  ps: parsed.ps || \u0027\u0027,\n  personaAngle: parsed.personaAngle || persona,\n  emotionalTone: parsed.emotionalTone || \u0027pragmatic-high-signal\u0027,\n  spamRisks: safeArray(parsed.spamRisks),\n  hooksUsed: safeArray(parsed.hooksUsed),\n  deliverabilityChecklist: safeArray(parsed.deliverabilityChecklist, [\u0027Run through deliverability scanner\u0027]),\n  complianceNotes: safeArray(parsed.complianceNotes),\n  segment: parsed.segment || persona.toLowerCase().replace(/[^a-z0-9]+/g, \u0027-\u0027),\n  dripIdeas: safeArray(parsed.dripIdeas).map(item =\u003e\n    typeof item === \u0027object\u0027\n      ? { day: item.day ?? safeArray(parsed.dripIdeas).indexOf(item) + 1, angle: item.angle || item.topic || \u0027\u0027, cta: item.cta || item.callToAction || \u0027\u0027 }\n      : { day: 1, angle: String(item), cta: \u0027Learn more\u0027 }\n  ),\n};\nconst record = {\n  slug,\n  generatedAt: new Date().toISOString(),\n  type: \u0027email_pulse\u0027,\n  persona,\n  pains,\n  hooks,\n  email,\n};\nreturn [\n  {\n    json: {\n      ...base,\n      emailRecord: record,\n      emailPath: `/data/agency/queue/email/${slug}.jsonl`,\n    },\n    binary: {\n      data: {\n        data: Buffer.from(JSON.stringify(record) + \u0027\\n\u0027, \u0027utf8\u0027).toString(\u0027base64\u0027),\n        mimeType: \u0027application/json\u0027,\n        fileName: `${slug}.jsonl`,\n      },\n    },\n  },\n];"
                                     },
                      "id":  "eaef4a0f-c811-4694-8051-a1a92902bcbb",
                      "name":  "Email Pulse Composer",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -16320,
                                       4440
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const base = items[0].json || {};\nconst slug = base.slug || `referral-${Date.now()}`;\nconst prompt = [\n  \"Design a viral referral mini-campaign with 3 reward tiers.\",\n  `Offer: ${base.title || \"Affiliate Momentum\"}` ,\n  `Program niche: ${base.niche || \"marketing\"}` ,\n  \"Return JSON {tiers:[{name,requirement,reward,copy}],trackingTips:[...],cta}.\",\n].join(\"\\n\");\nlet response;\ntry {\n  response = await this.helpers.httpRequest({\n    method: \"POST\",\n    url: \"http://ollama:11434/api/generate\",\n    json: { model: \"llama3.1:8b\", prompt, stream: false },\n    timeout: 120000,\n  });\n} catch (error) {\n  response = { response: JSON.stringify({ tiers: [{ name: \"Warm-up\", requirement: \"3 referrals\", reward: \"Swipe vault\", copy: \"Bring three friends and unlock hidden scripts.\" }], trackingTips: [\"Use UTM = ref-\u003c\u003cname\u003e\u003e\"], cta: { copy: \"Grab your invite link\", link: base.short_link || base.long_url || \"https://example.com\" } }) };\n}\nconst raw = typeof response === \"string\" ? response : (response.response || response.body || JSON.stringify(response));\nlet parsed;\ntry {\n  parsed = JSON.parse(raw);\n  if (!parsed.tiers) throw new Error(\"missing tiers\");\n} catch (error) {\n  parsed = { tiers: [{ name: \"Starter\", requirement: \"3 referrals\", reward: \"Bonus SOP\", copy: raw.slice(0, 120) }], trackingTips: [\"Tag every lead in CRM\"], cta: { copy: \"Unlock the bonus\", link: base.short_link || \"https://example.com\" } };\n}\nconst record = {\n  slug,\n  generatedAt: new Date().toISOString(),\n  type: \"referral_swarm\",\n  referral: parsed,\n};\nreturn [\n  {\n    json: {\n      ...base,\n      referralRecord: record,\n      referralPath: `/data/agency/queue/referrals/${slug}.jsonl`,\n    },\n    binary: {\n      data: {\n        data: Buffer.from(JSON.stringify(record) + \"\\n\", \"utf8\").toString(\"base64\"),\n        mimeType: \"application/json\",\n        fileName: `${slug}.jsonl`,\n      },\n    },\n  },\n];"
                                     },
                      "id":  "20841aa7-2aff-41e1-9308-10391bc09703",
                      "name":  "Referral Swarm Generator",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -16320,
                                       4260
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const base = items[0].json || {};\nconst slug = base.slug || `challenge-${Date.now()}`;\nconst prompt = [\n  \"Outline a 5-day micro-challenge that makes people deploy the offer.\",\n  `Offer: ${base.title || \"Affiliate Momentum\"}` ,\n  `Persona: ${(base.pick?.persona || base.meta?.persona || \"affiliate marketer\")}` ,\n  \"Return JSON {days:[{theme,action,proofPrompt}],dailyLive:{title,agenda},cta}.\",\n].join(\"\\n\");\nlet response;\ntry {\n  response = await this.helpers.httpRequest({\n    method: \"POST\",\n    url: \"http://ollama:11434/api/generate\",\n    json: { model: \"llama3.1:8b\", prompt, stream: false },\n    timeout: 120000,\n  });\n} catch (error) {\n  response = { response: JSON.stringify({ days: [{ theme: \"Kick-off\", action: \"Set revenue target\", proofPrompt: \"Share your number screenshot\" }], dailyLive: { title: \"Live Funnel Tear-down\", agenda: [\"Audit offers\", \"Stack bonuses\"] }, cta: { copy: \"Secure your seat\", link: base.short_link || base.long_url || \"https://example.com\" } }) };\n}\nconst raw = typeof response === \"string\" ? response : (response.response || response.body || JSON.stringify(response));\nlet parsed;\ntry {\n  parsed = JSON.parse(raw);\n  if (!parsed.days) throw new Error(\"missing days\");\n} catch (error) {\n  parsed = { days: [{ theme: \"Momentum reset\", action: \"Audit funnel\", proofPrompt: \"Post your new hook\" }], dailyLive: { title: \"Office hours\", agenda: [\"Wins\", \"Breakthroughs\"] }, cta: { copy: \"Join the sprint\", link: base.short_link || \"https://example.com\" } };\n}\nconst record = {\n  slug,\n  generatedAt: new Date().toISOString(),\n  type: \"challenge_cascade\",\n  challenge: parsed,\n};\nreturn [\n  {\n    json: {\n      ...base,\n      challengeRecord: record,\n      challengePath: `/data/agency/queue/challenges/${slug}.jsonl`,\n    },\n    binary: {\n      data: {\n        data: Buffer.from(JSON.stringify(record) + \"\\n\", \"utf8\").toString(\"base64\"),\n        mimeType: \"application/json\",\n        fileName: `${slug}.jsonl`,\n      },\n    },\n  },\n];"
                                     },
                      "id":  "3467ddb9-0111-48b3-b231-cbef3af86172",
                      "name":  "Challenge Cascade Planner",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -16320,
                                       4080
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const base = items[0].json || {};\nconst slug = base.slug || `pingback-${Date.now()}`;\nconst prompt = [\n  \"Create 8 dopamine-triggering engagement prompts for comments, DMs, and community replies.\",\n  `Offer: ${base.title || \"Affiliate Momentum\"}` ,\n  `Angles: ${(base.hookstormRecord?.hooks || []).slice(0, 3).map(h =\u003e h.hook).join(\" | \")}` ,\n  \"Return JSON {prompts:[{channel,copy,ctaTag}],dmStarters:[...],flare:{headline,body}}.\",\n].join(\"\\n\");\nlet response;\ntry {\n  response = await this.helpers.httpRequest({\n    method: \"POST\",\n    url: \"http://ollama:11434/api/generate\",\n    json: { model: \"llama3.1:8b\", prompt, stream: false },\n    timeout: 120000,\n  });\n} catch (error) {\n  response = { response: JSON.stringify({ prompts: [{ channel: \"comments\", copy: \"Want the swipe? Reply \\\"UNLOCK\\\"\", ctaTag: \"#unlock\" }], dmStarters: [\"Drop me your dream KPI\"], flare: { headline: \"Stack dopamine, stack sales\", body: \"Remind them of the surprise bonus at message 3.\" } }) };\n}\nconst raw = typeof response === \"string\" ? response : (response.response || response.body || JSON.stringify(response));\nlet parsed;\ntry {\n  parsed = JSON.parse(raw);\n  if (!parsed.prompts) throw new Error(\"missing prompts\");\n} catch (error) {\n  parsed = { prompts: [{ channel: \"comments\", copy: raw.slice(0, 140), ctaTag: \"#claim\" }], dmStarters: [\"What would a 3x EPC mean?\"], flare: { headline: \"Ping them back\", body: \"Follow-up with curiosity clip.\" } };\n}\nconst record = {\n  slug,\n  generatedAt: new Date().toISOString(),\n  type: \"dopamine_pingbacks\",\n  pingbacks: parsed,\n};\nreturn [\n  {\n    json: {\n      ...base,\n      pingbackRecord: record,\n      pingbackPath: `/data/agency/queue/pingbacks/${slug}.jsonl`,\n    },\n    binary: {\n      data: {\n        data: Buffer.from(JSON.stringify(record) + \"\\n\", \"utf8\").toString(\"base64\"),\n        mimeType: \"application/json\",\n        fileName: `${slug}.jsonl`,\n      },\n    },\n  },\n];"
                                     },
                      "id":  "e55dd02c-97b8-42f9-b307-6a184072b50b",
                      "name":  "Dopamine Pingbacks Studio",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -16320,
                                       3900
                                   ]
                  },
                  {
                      "parameters":  {
                                         "fileName":  "={{$json.hookstormPath}}",
                                         "options":  {
                                                         "append":  true
                                                     }
                                     },
                      "id":  "6bc0915e-c902-43e2-965f-cbb53f96524d",
                      "name":  "Write Hookstorm",
                      "type":  "n8n-nodes-base.writeBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -16112,
                                       4800
                                   ]
                  },
                  {
                      "parameters":  {
                                         "fileName":  "={{$json.threadPath}}",
                                         "options":  {
                                                         "append":  true
                                                     }
                                     },
                      "id":  "d9464f80-a919-44ff-967e-5a6f7020e678",
                      "name":  "Write Thread Kit",
                      "type":  "n8n-nodes-base.writeBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -16112,
                                       4620
                                   ]
                  },
                  {
                      "parameters":  {
                                         "fileName":  "={{$json.emailPath}}",
                                         "options":  {
                                                         "append":  true
                                                     }
                                     },
                      "id":  "b2cfbdb4-1728-4472-a0d9-6bd03e057a70",
                      "name":  "Write Email Pulse",
                      "type":  "n8n-nodes-base.writeBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -16112,
                                       4440
                                   ]
                  },
                  {
                      "parameters":  {
                                         "fileName":  "={{$json.referralPath}}",
                                         "options":  {
                                                         "append":  true
                                                     }
                                     },
                      "id":  "67dd0fc7-4250-4651-93cf-d5ff13400f00",
                      "name":  "Write Referral Swarm",
                      "type":  "n8n-nodes-base.writeBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -16112,
                                       4260
                                   ]
                  },
                  {
                      "parameters":  {
                                         "fileName":  "={{$json.challengePath}}",
                                         "options":  {
                                                         "append":  true
                                                     }
                                     },
                      "id":  "c5a17958-d53d-40b6-a79d-0dd07babb4ee",
                      "name":  "Write Challenge Cascade",
                      "type":  "n8n-nodes-base.writeBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -16112,
                                       4080
                                   ]
                  },
                  {
                      "parameters":  {
                                         "fileName":  "={{$json.pingbackPath}}",
                                         "options":  {
                                                         "append":  true
                                                     }
                                     },
                      "id":  "feae38b4-0814-4ed3-8956-5f91f04ab635",
                      "name":  "Write Dopamine Pingbacks",
                      "type":  "n8n-nodes-base.writeBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -16112,
                                       3900
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const base = items[0].json || {};\nconst record = base.emailRecord || {};\nconst email = record.email || {};\nconst persona = record.persona || email.personaAngle || base.persona || \u0027general\u0027;\nconst segment = email.segment || persona.toLowerCase().replace(/[^a-z0-9]+/g, \u0027-\u0027);\nconst pains = (record.pains || \u0027\u0027).split(\u0027|\u0027).map(s =\u003e s.trim()).filter(Boolean);\nconst hooks = (record.hooks || \u0027\u0027).split(\u0027|\u0027).map(s =\u003e s.trim()).filter(Boolean);\nconst tiers = base.pick?.tiers || base.offerTiers || [];\nconst lifecycle = base.lifecycleStage || (base.channel_id ? \u0027subscriber\u0027 : \u0027prospect\u0027);\nconst matrix = [\n  {\n    persona,\n    segment,\n    lifecycle,\n    intensity: \u0027hot\u0027,\n    hook: hooks[0] || \u0027\u0027,\n    pain: pains[0] || \u0027\u0027,\n    tier: tiers[0]?.name || \u0027core\u0027,\n  },\n  {\n    persona,\n    segment: `${segment}-nurture`,\n    lifecycle: lifecycle === \u0027prospect\u0027 ? \u0027nurture\u0027 : lifecycle,\n    intensity: \u0027warm\u0027,\n    hook: hooks[1] || hooks[0] || \u0027\u0027,\n    pain: pains[1] || pains[0] || \u0027\u0027,\n    tier: tiers[1]?.name || \u0027vip\u0027,\n  },\n  {\n    persona,\n    segment: `${segment}-winback`,\n    lifecycle: \u0027winback\u0027,\n    intensity: \u0027cool\u0027,\n    hook: hooks[2] || hooks[0] || \u0027\u0027,\n    pain: pains[2] || pains[0] || \u0027\u0027,\n    tier: tiers[2]?.name || \u0027continuity\u0027,\n  },\n];\nreturn [\n  {\n    json: {\n      ...base,\n      emailPersonaMatrix: matrix,\n    },\n  },\n];"
                                     },
                      "id":  "df863979-f974-41c7-8faf-6f7d5f3a801d",
                      "name":  "Email Persona Matrix",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -16112,
                                       4320
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const base = items[0].json || {};\nconst record = base.emailRecord || {};\nconst email = record.email || {};\nconst personaMatrix = base.emailPersonaMatrix || [];\nconst prompt = [\n  \u0027Create 5 subject+preview variants with CTA copy for email marketing.\u0027,\n  `Primary subject: ${email.subject || \u0027\u0027}`,\n  `Primary preview: ${email.preview || \u0027\u0027}`,\n  `Persona: ${record.persona || email.personaAngle || \u0027general\u0027}`,\n  `Segments: ${personaMatrix.map(item =\u003e item.segment).join(\u0027, \u0027)}`,\n  \u0027Return JSON array of {subject, preview, ctaCopy, tone, targetSegment}.\u0027,\n].join(\u0027\\n\u0027);\nlet response;\ntry {\n  response = await this.helpers.httpRequest({\n    method: \u0027POST\u0027,\n    url: \u0027http://ollama:11434/api/generate\u0027,\n    json: { model: \u0027llama3.1:8b\u0027, prompt, stream: false },\n    timeout: 120000,\n  });\n} catch (error) {\n  response = {\n    response: JSON.stringify([\n      { subject: \u0027Unlock 9-day EPC boost\u0027, preview: \u0027Copy the bonus stack playbook\u0027, ctaCopy: \u0027Show me the stack\u0027, tone: \u0027urgent\u0027, targetSegment: personaMatrix[0]?.segment || \u0027core\u0027 },\n      { subject: \u0027Creators tripled commissions with this tweak\u0027, preview: \u0027A 15-minute rebuild for your funnel\u0027, ctaCopy: \u0027Send the SOP\u0027, tone: \u0027curiosity\u0027, targetSegment: personaMatrix[1]?.segment || \u0027nurture\u0027 },\n    ]),\n  };\n}\nconst raw = typeof response === \u0027string\u0027 ? response : (response?.response || response?.body || JSON.stringify(response));\nlet parsed;\ntry {\n  parsed = JSON.parse(raw);\n  if (!Array.isArray(parsed)) throw new Error(\u0027expected array\u0027);\n} catch (error) {\n  parsed = [{ subject: raw.slice(0, 60) || email.subject || \u0027Quick win inside\u0027, preview: email.preview || \u0027\u0027, ctaCopy: email.cta?.copy || \u0027Claim now\u0027, tone: \u0027pragmatic\u0027, targetSegment: personaMatrix[0]?.segment || \u0027core\u0027 }];\n}\nconst record = {\n  slug: record.slug || base.slug || `email-${Date.now()}`,\n  generatedAt: new Date().toISOString(),\n  variants: parsed,\n};\nreturn [\n  {\n    json: {\n      ...base,\n      emailVariantsRecord: record,\n      emailVariantsPath: `/data/agency/queue/email/variants/${record.slug}.jsonl`,\n    },\n    binary: {\n      data: {\n        data: Buffer.from(JSON.stringify(record) + \u0027\\n\u0027, \u0027utf8\u0027).toString(\u0027base64\u0027),\n        mimeType: \u0027application/json\u0027,\n        fileName: `${record.slug}.jsonl`,\n      },\n    },\n  },\n];"
                                     },
                      "id":  "5b64674b-1b1d-4d52-963a-79ddd98012b3",
                      "name":  "Email Variant Generator",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -15904,
                                       4320
                                   ]
                  },
                  {
                      "parameters":  {
                                         "options":  {
                                                         "append":  true
                                                     },
                                         "fileName":  "={{$json.emailVariantsPath}}"
                                     },
                      "id":  "50fbdebd-296d-4031-88b6-d45744ec57c6",
                      "name":  "Write Email Variants",
                      "type":  "n8n-nodes-base.writeBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -15696,
                                       4320
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const base = items[0].json || {};\nconst record = base.emailRecord || {};\nconst email = record.email || {};\nconst personaMatrix = base.emailPersonaMatrix || [];\nconst prompt = [\n  \u0027Draft a 5-touch email sequence roadmap building on the core email.\u0027,\n  `Core CTA: ${email.cta?.copy || \u0027Claim the stack\u0027}`,\n  `Persona: ${record.persona || email.personaAngle || \u0027general\u0027}`,\n  `Segments: ${personaMatrix.map(s =\u003e `${s.segment}:${s.intensity}`).join(\u0027, \u0027)}`,\n  \u0027Return JSON array of {step, sendDay, angle, objective, ctaCopy, channelEcho (array)}.\u0027,\n].join(\u0027\\n\u0027);\nlet response;\ntry {\n  response = await this.helpers.httpRequest({\n    method: \u0027POST\u0027,\n    url: \u0027http://ollama:11434/api/generate\u0027,\n    json: { model: \u0027llama3.1:8b\u0027, prompt, stream: false },\n    timeout: 120000,\n  });\n} catch (error) {\n  response = {\n    response: JSON.stringify([\n      { step: 1, sendDay: 0, angle: \u0027Proof snapshot\u0027, objective: \u0027Establish outcome\u0027, ctaCopy: email.cta?.copy || \u0027Grab the SOP\u0027, channelEcho: [\u0027sms\u0027, \u0027dm\u0027] },\n      { step: 2, sendDay: 2, angle: \u0027Behind-the-scenes\u0027, objective: \u0027Build desire\u0027, ctaCopy: \u0027Send me the toolkit\u0027, channelEcho: [\u0027community\u0027] },\n      { step: 3, sendDay: 4, angle: \u0027Objection flip\u0027, objective: \u0027Handle risk\u0027, ctaCopy: \u0027Show me the case study\u0027, channelEcho: [\u0027ads\u0027, \u0027dm\u0027] },\n    ]),\n  };\n}\nconst raw = typeof response === \u0027string\u0027 ? response : (response?.response || response?.body || JSON.stringify(response));\nlet parsed;\ntry {\n  parsed = JSON.parse(raw);\n  if (!Array.isArray(parsed)) throw new Error(\u0027expected array\u0027);\n} catch (error) {\n  parsed = [{ step: 1, sendDay: 0, angle: \u0027Quick win\u0027, objective: \u0027Get reply\u0027, ctaCopy: email.cta?.copy || \u0027Reply with BONUS\u0027, channelEcho: [\u0027dm\u0027] }];\n}\nconst sequenceRecord = {\n  slug: record.slug || base.slug || `email-${Date.now()}`,\n  generatedAt: new Date().toISOString(),\n  steps: parsed,\n};\nreturn [\n  {\n    json: {\n      ...base,\n      emailSequenceRecord: sequenceRecord,\n      emailSequencePath: `/data/agency/queue/email/sequences/${sequenceRecord.slug}.jsonl`,\n    },\n    binary: {\n      data: {\n        data: Buffer.from(JSON.stringify(sequenceRecord) + \u0027\\n\u0027, \u0027utf8\u0027).toString(\u0027base64\u0027),\n        mimeType: \u0027application/json\u0027,\n        fileName: `${sequenceRecord.slug}.jsonl`,\n      },\n    },\n  },\n];"
                                     },
                      "id":  "baadd49b-2dc3-4c15-b180-48116335e0c2",
                      "name":  "Email Sequence Planner",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -15904,
                                       4140
                                   ]
                  },
                  {
                      "parameters":  {
                                         "options":  {
                                                         "append":  true
                                                     },
                                         "fileName":  "={{$json.emailSequencePath}}"
                                     },
                      "id":  "2228462e-3e73-4095-9adf-99c839179a7b",
                      "name":  "Write Email Sequence",
                      "type":  "n8n-nodes-base.writeBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -15696,
                                       4140
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const base = items[0].json || {};\nconst record = base.emailRecord || {};\nconst email = record.email || {};\nconst slug = record.slug || base.slug || `email-${Date.now()}`;\nconst paragraphs = Array.isArray(email.lineBreaks) ? email.lineBreaks : [String(email.lineBreaks || \u0027\u0027)];\nconst html = `\u003c!doctype html\u003e\\n\u003chtml lang=\"en\"\u003e\\n\u003chead\u003e\\n\u003cmeta charset=\"utf-8\" /\u003e\\n\u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /\u003e\\n\u003ctitle\u003e${email.subject || \u0027Email\u0027}\u003c/title\u003e\\n\u003c/head\u003e\\n\u003cbody style=\"font-family:Inter,Helvetica,Arial,sans-serif;color:#111;line-height:1.5;\"\u003e\\n\u003cp style=\"font-size:14px;color:#666;\"\u003e${email.preview || \u0027\u0027}\u003c/p\u003e\\n${paragraphs.map(p =\u003e `\u003cp style=\"font-size:16px;margin:16px 0;\"\u003e${p}\u003c/p\u003e`).join(\u0027\\n\u0027)}\\n\u003cp style=\"margin:24px 0;\"\u003e\u003ca href=\"${email.cta?.link || \u0027#\u0027}\" style=\"display:inline-block;background:#1b64f2;color:#fff;padding:12px 20px;border-radius:6px;text-decoration:none;font-weight:600;\"\u003e${email.cta?.copy || \u0027Learn more\u0027}\u003c/a\u003e\u003c/p\u003e\\n\u003cp style=\"font-size:14px;color:#555;\"\u003e${email.ps || \u0027\u0027}\u003c/p\u003e\\n\u003c/body\u003e\\n\u003c/html\u003e`;\nreturn [\n  {\n    json: {\n      ...base,\n      emailHtmlRecord: {\n        slug,\n        generatedAt: new Date().toISOString(),\n        html,\n      },\n      emailHtmlPath: `/data/agency/queue/email/html/${slug}.html`,\n    },\n    binary: {\n      html: {\n        data: Buffer.from(html, \u0027utf8\u0027).toString(\u0027base64\u0027),\n        mimeType: \u0027text/html\u0027,\n        fileName: `${slug}.html`,\n      },\n    },\n  },\n];"
                                     },
                      "id":  "7513648b-dbec-4b8a-8cb5-2ff65132d5a7",
                      "name":  "Email HTML Renderer",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -16112,
                                       4500
                                   ]
                  },
                  {
                      "parameters":  {
                                         "options":  {
                                                         "append":  false
                                                     },
                                         "fileName":  "={{$json.emailHtmlPath}}"
                                     },
                      "id":  "41f68721-b969-4282-ab6c-d9e3130b34b8",
                      "name":  "Write Email HTML",
                      "type":  "n8n-nodes-base.writeBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -15904,
                                       4500
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const base = items[0].json || {};\nconst record = base.emailRecord || {};\nconst email = record.email || {};\nconst spamWords = [\u0027free\u0027, \u0027guarantee\u0027, \u0027risk-free\u0027, \u0027winner\u0027, \u0027cash\u0027];\nconst body = (Array.isArray(email.lineBreaks) ? email.lineBreaks.join(\u0027 \u0027) : String(email.lineBreaks || \u0027\u0027)) + \u0027 \u0027 + (email.ps || \u0027\u0027);\nconst found = spamWords\n  .map(word =\u003e ({ word, count: (body.match(new RegExp(word, \u0027ig\u0027)) || []).length }))\n  .filter(item =\u003e item.count \u003e 0);\nconst textLength = body.length;\nconst linkCount = (body.match(/https?:\\/\\//g) || []).length + ((email.cta?.link \u0026\u0026 email.cta.link.startsWith(\u0027http\u0027)) ? 1 : 0);\nconst score = Math.max(0, 100 - (found.length * 8) - (linkCount \u003e 3 ? (linkCount - 3) * 10 : 0));\nconst report = {\n  slug: record.slug || base.slug || `email-${Date.now()}`,\n  generatedAt: new Date().toISOString(),\n  score,\n  findings: found,\n  guidance: [\n    ...(email.deliverabilityChecklist || []),\n    ...(found.length ? [\u0027Consider rewriting highlighted spam terms.\u0027] : [\u0027No major spam triggers detected.\u0027]),\n    linkCount \u003e 3 ? \u0027Reduce hyperlink count to \u003c=3 per email.\u0027 : \u0027Link count healthy.\u0027,\n    textLength \u003c 400 ? \u0027Add more body copy to balance HTML weight.\u0027 : \u0027Body length healthy.\u0027,\n  ],\n};\nreturn [\n  {\n    json: {\n      ...base,\n      emailDeliverabilityRecord: report,\n      emailDeliverabilityPath: `/data/agency/queue/email/deliverability/${report.slug}.jsonl`,\n    },\n    binary: {\n      data: {\n        data: Buffer.from(JSON.stringify(report) + \u0027\\n\u0027, \u0027utf8\u0027).toString(\u0027base64\u0027),\n        mimeType: \u0027application/json\u0027,\n        fileName: `${report.slug}.jsonl`,\n      },\n    },\n  },\n];"
                                     },
                      "id":  "d585c625-9c8b-4ca0-a992-1e16e2110c67",
                      "name":  "Email Deliverability Scanner",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -16112,
                                       4680
                                   ]
                  },
                  {
                      "parameters":  {
                                         "options":  {
                                                         "append":  true
                                                     },
                                         "fileName":  "={{$json.emailDeliverabilityPath}}"
                                     },
                      "id":  "1d7afca0-2fa8-4ab4-ac23-d4a3b070efda",
                      "name":  "Write Email Deliverability",
                      "type":  "n8n-nodes-base.writeBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -15904,
                                       4680
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const base = items[0].json || {};\nconst htmlRecord = base.emailHtmlRecord || {};\nconst emailRecord = base.emailRecord || {};\nconst email = emailRecord.email || {};\nconst slug = emailRecord.slug || base.slug || `email-${Date.now()}`;\nconst payload = {\n  slug,\n  createdAt: new Date().toISOString(),\n  esp: \u0027sendgrid\u0027,\n  personalizations: [\n    {\n      subject: email.subject,\n      dynamic_template_data: {\n        preview: email.preview,\n        persona: email.personaAngle,\n        cta_copy: email.cta?.copy,\n        cta_url: email.cta?.link,\n      },\n    },\n  ],\n  content: [\n    { type: \u0027text/plain\u0027, value: (Array.isArray(email.lineBreaks) ? email.lineBreaks.join(\u0027\\n\\n\u0027) : \u0027\u0027) + `\\n\\n${email.cta?.copy || \u0027\u0027}: ${email.cta?.link || \u0027\u0027}` },\n    { type: \u0027text/html\u0027, value: htmlRecord.html || \u0027\u0027 },\n  ],\n};\nreturn [\n  {\n    json: {\n      ...base,\n      emailEspPayload: payload,\n      emailEspPath: `/data/agency/queue/email/esp/${slug}.json`,\n    },\n    binary: {\n      data: {\n        data: Buffer.from(JSON.stringify(payload, null, 2) + \u0027\\n\u0027, \u0027utf8\u0027).toString(\u0027base64\u0027),\n        mimeType: \u0027application/json\u0027,\n        fileName: `${slug}.json`,\n      },\n    },\n  },\n];"
                                     },
                      "id":  "f7f952e4-e9ce-4a1e-8f66-0bfbe25d7192",
                      "name":  "ESP Payload Builder",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -15792,
                                       4500
                                   ]
                  },
                  {
                      "parameters":  {
                                         "options":  {
                                                         "append":  false
                                                     },
                                         "fileName":  "={{$json.emailEspPath}}"
                                     },
                      "id":  "20d6e3dd-22a4-440e-ba7b-13137a559e72",
                      "name":  "Write ESP Payload",
                      "type":  "n8n-nodes-base.writeBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -15584,
                                       4500
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "const base = items[0].json || {};\nconst deliverability = base.emailDeliverabilityRecord || {};\nconst variants = base.emailVariantsRecord?.variants || [];\nconst sequence = base.emailSequenceRecord?.steps || [];\nconst htmlRecord = base.emailHtmlRecord || {};\nconst slug = deliverability.slug || base.emailRecord?.slug || base.slug || `email-${Date.now()}`;\nconst summary = {\n  slug,\n  generatedAt: new Date().toISOString(),\n  score: deliverability.score ?? 80,\n  spamFindings: deliverability.findings || [],\n  variantCount: variants.length,\n  sequenceTouchpoints: sequence.length,\n  htmlBytes: htmlRecord.html ? Buffer.from(htmlRecord.html, \u0027utf8\u0027).length : 0,\n  nextActions: [\n    ...(deliverability.guidance || []),\n    variants.length \u003c 3 ? \u0027Generate additional subject variants.\u0027 : \u0027Variant coverage good.\u0027,\n    sequence.length \u003c 3 ? \u0027Expand drip sequence to at least 3 touches.\u0027 : \u0027Sequence depth on target.\u0027,\n  ],\n};\nreturn [\n  {\n    json: {\n      ...base,\n      emailQaSummary: summary,\n      emailQaPath: `/data/agency/queue/email/qa/${slug}.jsonl`,\n    },\n    binary: {\n      data: {\n        data: Buffer.from(JSON.stringify(summary) + \u0027\\n\u0027, \u0027utf8\u0027).toString(\u0027base64\u0027),\n        mimeType: \u0027application/json\u0027,\n        fileName: `${slug}.jsonl`,\n      },\n    },\n  },\n];"
                                     },
                      "id":  "bf0fb12f-3163-4651-8f75-1e380a83a73d",
                      "name":  "Email QA Report",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -15792,
                                       4680
                                   ]
                  },
                  {
                      "parameters":  {
                                         "options":  {
                                                         "append":  true
                                                     },
                                         "fileName":  "={{$json.emailQaPath}}"
                                     },
                      "id":  "b7d21776-2e3b-4549-a0bb-234f44e17a68",
                      "name":  "Write Email QA",
                      "type":  "n8n-nodes-base.writeBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -15584,
                                       4680
                                   ]
                  },
                  {
                      "parameters":  {
                                         "filePath":  "/data/agency/datastore/published.csv"
                                     },
                      "id":  "ed37763f-1ae7-4c80-a997-4cbe6758fefe",
                      "name":  "Read published.csv (Idempotency)",
                      "type":  "n8n-nodes-base.readBinaryFile",
                      "typeVersion":  1,
                      "position":  [
                                       -17536,
                                       5200
                                   ]
                  },
                  {
                      "parameters":  {
                                         "functionCode":  "function parseCSV(str){const out=[],line=[];let q=false;for(let i=0;i<str.length;i++){const c=str[i];if(c==='\\r')continue;if(c==='\\n'){out.push(line.join(''));line.length=0;q=false;continue;}if(c==='\"'){if(q&&str[i+1]==='\"){line.push('\"');i++;}else q=!q;}else line.push(c);}if(line.length)out.push(line.join(''));return out.map(row=>{const a=[];let s='',qq=false;for(let i=0;i<row.length;i++){const ch=row[i];if(ch==='\"'){if(qq&&row[i+1]==='\"){s+='\"';i++;}else qq=!qq;}else if(ch===','&&!qq){a.push(s);s='';}else s+=ch;}a.push(s);return a;});}\nconst base=items[0].json||{};const slug=String(base.slug||'').trim();const binary=items[0].binary?.data?.data||items[0].binary?.data; if(!slug){return[{json:{...base,alreadyPublished:false}}];}\nlet exists=false; if(binary){const txt=Buffer.from(binary,'base64').toString('utf8');const rows=parseCSV(txt);if(rows.length>1){const header=rows[0].map(value=>String(value||'').trim());const idx=key=>header.indexOf(key);const slugIdx=idx('slug');const statusIdx=idx('status');for(let i=1;i<rows.length;i++){const row=rows[i];if(!row)continue;const rowSlug=slugIdx>=0?String(row[slugIdx]||'').trim():'';if(!rowSlug)continue;if(rowSlug===slug){const status=statusIdx>=0?String(row[statusIdx]||'').trim():'';if(status!=='failed'&&status!=='error'){exists=true;break;}}}}}\nreturn[{json:{...base,alreadyPublished:exists}}];"
                                     },
                      "id":  "7b871bc9-a9a7-4da1-aaf3-71be9d44001a",
                      "name":  "Slug Already Published?",
                      "type":  "n8n-nodes-base.function",
                      "typeVersion":  1,
                      "position":  [
                                       -17312,
                                       5200
                                   ]
                  },
                  {
                      "parameters":  {
                                         "conditions":  {
                                                              "boolean":  [
                                                                              {
                                                                                  "value1":  "={{$json.alreadyPublished===true}}",
                                                                                  "operation":  "isTrue"
                                                                              }
                                                                          ]
                                                          }
                                     },
                      "id":  "c699a3f4-0f0b-40ea-a42d-3a15ff3e813d",
                      "name":  "IF Duplicate?",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "position":  [
                                       -17088,
                                       5200
                                   ]
                  },
                  {
                      "parameters":  {
                                         "assignments":  {
                                                             "assignments":  [
                                                                                 {
                                                                                     "id":  "reason",
                                                                                     "name":  "reason",
                                                                                     "type":  "string",
                                                                                     "value":  "duplicate_slug"
                                                                                 },
                                                                                 {
                                                                                     "id":  "stage",
                                                                                     "name":  "stage",
                                                                                     "type":  "string",
                                                                                     "value":  "idempotency"
                                                                                 },
                                                                                 {
                                                                                     "id":  "status",
                                                                                     "name":  "status",
                                                                                     "type":  "string",
                                                                                     "value":  "rejected"
                                                                                 }
                                                                             ]
                                                         },
                                         "options":  {

                                                     }
                                     },
                      "id":  "0efcbcdb-265d-4978-bc4f-be66135f71b9",
                      "name":  "Duplicate Skip",
                      "type":  "n8n-nodes-base.set",
                      "typeVersion":  3.4,
                      "position":  [
                                       -16864,
                                       5408
                                   ]
                  },
                  {
                      "parameters":  {
                                         "conditions":  {
                                                              "string":  [
                                                                              {
                                                                                  "value1":  "={{$json.status || 'ok'}}",
                                                                                  "operation":  "equals",
                                                                                  "value2":  "ok"
                                                                              }
                                                                          ]
                                                          }
                                     },
                      "id":  "12bd8919-c28b-41c1-b5b2-b6da114c3f15",
                      "name":  "Proceed to Production?",
                      "type":  "n8n-nodes-base.if",
                      "typeVersion":  1,
                      "position":  [
                                       -17856,
                                       5568
                                   ]
                  }
              ],
    "connections":  {
                        "Run 20:10 BKK (Targets 06:10 PT)":  {
                                                                 "main":  [
                                                                              [
                                                                                  {
                                                                                      "node":  "Run Manifest",
                                                                                      "type":  "main",
                                                                                      "index":  0
                                                                                  }
                                                                              ]
                                                                          ]
                                                             },
                        "Run 22:10 BKK (Targets 08:10 PT)":  {
                                                                 "main":  [
                                                                              [
                                                                                  {
                                                                                      "node":  "Run Manifest",
                                                                                      "type":  "main",
                                                                                      "index":  0
                                                                                  }
                                                                              ]
                                                                          ]
                                                             },
                        "Run 00:10 BKK (Targets 10:10 PT)":  {
                                                                 "main":  [
                                                                              [
                                                                                  {
                                                                                      "node":  "Run Manifest",
                                                                                      "type":  "main",
                                                                                      "index":  0
                                                                                  }
                                                                              ]
                                                                          ]
                                                             },
                        "Run Manifest":  {
                                             "main":  [
                                                          [
                                                              {
                                                                  "node":  "Acquire Lock",
                                                                  "type":  "main",
                                                                  "index":  0
                                                              }
                                                          ]
                                                      ]
                                         },
                        "Acquire Lock":  {
                                             "main":  [
                                                          [
                                                              {
                                                                  "node":  "Lock Acquired?",
                                                                  "type":  "main",
                                                                  "index":  0
                                                              }
                                                          ]
                                                      ]
                                         },
                        "Lock Acquired?":  {
                                               "main":  [
                                                            [
                                                                {
                                                                    "node":  "Ensure Datastore + Dirs",
                                                                    "type":  "main",
                                                                    "index":  0
                                                                }
                                                            ]
                                                        ]
                                           },
                        "Ensure Datastore + Dirs":  {
                                                        "main":  [
                                                                     [
                                                                         {
                                                                             "node":  "Read channels.csv",
                                                                             "type":  "main",
                                                                             "index":  0
                                                                         },
                                                                         {
                                                                             "node":  "Read published.csv (30d)",
                                                                             "type":  "main",
                                                                             "index":  0
                                                                         },
                                                                         {
                                                                             "node":  "Read quota_log.csv",
                                                                             "type":  "main",
                                                                             "index":  0
                                                                         }
                                                                     ]
                                                                 ]
                                                    },
                        "Read channels.csv":  {
                                                  "main":  [
                                                               [
                                                                   {
                                                                       "node":  "CSV â†’ JSON (Channels)",
                                                                       "type":  "main",
                                                                       "index":  0
                                                                   }
                                                               ]
                                                           ]
                                              },
                        "CSV â†’ JSON (Channels)":  {
                                                        "main":  [
                                                                     [
                                                                         {
                                                                             "node":  "IF Active?",
                                                                             "type":  "main",
                                                                             "index":  0
                                                                         }
                                                                     ]
                                                                 ]
                                                    },
                        "IF Active?":  {
                                           "main":  [
                                                        [
                                                            {
                                                                "node":  "Read quota_log.csv",
                                                                "type":  "main",
                                                                "index":  0
                                                            }
                                                        ]
                                                    ]
                                       },
                        "Read quota_log.csv":  {
                                                   "main":  [
                                                                [
                                                                    {
                                                                        "node":  "Quota Summary (PT)",
                                                                        "type":  "main",
                                                                        "index":  0
                                                                    }
                                                                ]
                                                            ]
                                               },
                        "Quota Summary (PT)":  {
                                                   "main":  [
                                                                [
                                                                    {
                                                                        "node":  "Select YT Slots",
                                                                        "type":  "main",
                                                                        "index":  0
                                                                    }
                                                                ]
                                                            ]
                                               },
                        "Select YT Slots":  {
                                                "main":  [
                                                             [
                                                                 {
                                                                     "node":  "Split Channels (1)",
                                                                     "type":  "main",
                                                                     "index":  0
                                                                 }
                                                             ]
                                                         ]
                                            },
                        "Split Channels (1)":  {
                                                   "main":  [
                                                                [
                                                                    {
                                                                        "node":  "Google News RSS",
                                                                        "type":  "main",
                                                                        "index":  0
                                                                    }
                                                                ]
                                                            ]
                                               },
                        "Google News RSS":  {
                                                "main":  [
                                                             [
                                                                 {
                                                                     "node":  "Parse RSS",
                                                                     "type":  "main",
                                                                     "index":  0
                                                                 }
                                                             ]
                                                         ]
                                            },
                        "Parse RSS":  {
                                          "main":  [
                                                       [
                                                           {
                                                               "node":  "Research: Hacker News",
                                                               "type":  "main",
                                                               "index":  0
                                                           }
                                                       ]
                                                   ]
                                      },
                        "Ollama: Propose 9 Topics":  {
                                                         "main":  [
                                                                      [
                                                                          {
                                                                              "node":  "Pick Topic",
                                                                              "type":  "main",
                                                                              "index":  0
                                                                          }
                                                                      ]
                                                                  ]
                                                     },
                        "Pick Topic":  {
                                           "main":  [
                                                        [
                                                            {
                                                                "node":  "Offer Builder + Disclosure",
                                                                "type":  "main",
                                                                "index":  0
                                                            }
                                                        ]
                                                    ]
                                       },
                        "Offer Builder + Disclosure":  {
                                                           "main":  [
                                                                        [
                                                                            {
                                                                                "node":  "Ollama: Draft Script",
                                                                                "type":  "main",
                                                                                "index":  0
                                                                            }
                                                                        ]
                                                                    ]
                                                       },
                        "Ollama: Draft Script":  {
                                                     "main":  [
                                                                  [
                                                                      {
                                                                          "node":  "Pack Script + Meta",
                                                                          "type":  "main",
                                                                          "index":  0
                                                                      }
                                                                  ]
                                                              ]
                                                 },
                        "Pack Script + Meta":  {
                                                   "main":  [
                                                                [
                                                                    {
                                                                        "node":  "Read published.csv (Idempotency)",
                                                                        "type":  "main",
                                                                        "index":  0
                                                                    }
                                                                ]
                                                            ]
                                               },
                        "Build CTA Link":  {
                                               "main":  [
                                                            [
                                                                {
                                                                    "node":  "Shortlink Row",
                                                                    "type":  "main",
                                                                    "index":  0
                                                                }
                                                            ]
                                                        ]
                                           },
                        "Shortlink Row":  {
                                              "main":  [
                                                           [
                                                               {
                                                                   "node":  "Shortlink â†’ File",
                                                                   "type":  "main",
                                                                   "index":  0
                                                               }
                                                           ]
                                                       ]
                                          },
                        "Shortlink â†’ File":  {
                                                   "main":  [
                                                                [
                                                                    {
                                                                        "node":  "Append â†’ links.csv",
                                                                        "type":  "main",
                                                                        "index":  0
                                                                    }
                                                                ]
                                                            ]
                                               },
                        "Read published.csv (Idempotency)":  {
                                                                 "main":  [
                                                                              [
                                                                                  {
                                                                                      "node":  "Slug Already Published?",
                                                                                      "type":  "main",
                                                                                      "index":  0
                                                                                  }
                                                                              ]
                                                                          ]
                                                             },
                        "Slug Already Published?":  {
                                                        "main":  [
                                                                     [
                                                                         {
                                                                             "node":  "IF Duplicate?",
                                                                             "type":  "main",
                                                                             "index":  0
                                                                         }
                                                                     ]
                                                                 ]
                                                    },
                        "IF Duplicate?":  {
                                              "main":  [
                                                           [
                                                               {
                                                                   "node":  "Duplicate Skip",
                                                                   "type":  "main",
                                                                   "index":  0
                                                               }
                                                           ],
                                                           [
                                                               {
                                                                   "node":  "Quality Gate (Local)",
                                                                   "type":  "main",
                                                                   "index":  0
                                                               }
                                                           ]
                                                       ]
                                           },
                        "Duplicate Skip":  {
                                              "main":  [
                                                           [
                                                               {
                                                                   "node":  "Log Line",
                                                                   "type":  "main",
                                                                   "index":  0
                                                               }
                                                           ]
                                                       ]
                                           },
                        "Quality Gate (Local)":  {
                                                     "main":  [
                                                                  [
                                                                      {
                                                                          "node":  "Quality OK?",
                                                                          "type":  "main",
                                                                          "index":  0
                                                                      }
                                                                  ]
                                                              ]
                                                 },
                        "Quality OK?":  {
                                            "main":  [
                                                         [
                                                             {
                                                                 "node":  "Log Line",
                                                                 "type":  "main",
                                                                 "index":  0
                                                             },
                                                             {
                                                                 "node":  "Build CTA Link",
                                                                 "type":  "main",
                                                                 "index":  0
                                                             },
                                                             {
                                                                 "node":  "Hookstorm Reactor",
                                                                 "type":  "main",
                                                                 "index":  0
                                                             },
                                                             {
                                                                 "node":  "Reflex Thread Kit",
                                                                 "type":  "main",
                                                                 "index":  0
                                                             },
                                                             {
                                                                 "node":  "Email Pulse Composer",
                                                                 "type":  "main",
                                                                 "index":  0
                                                             },
                                                             {
                                                                 "node":  "Referral Swarm Generator",
                                                                 "type":  "main",
                                                                 "index":  0
                                                             },
                                                             {
                                                                 "node":  "Challenge Cascade Planner",
                                                                 "type":  "main",
                                                                 "index":  0
                                                             },
                                                             {
                                                                 "node":  "Dopamine Pingbacks Studio",
                                                                 "type":  "main",
                                                                 "index":  0
                                                             }
                                                         ],
                                                         [
                                                             {
                                                                 "node":  "DLQ Envelope",
                                                                 "type":  "main",
                                                                 "index":  0
                                                             }
                                                         ]
                                                     ]
                                        },
                        "DLQ Envelope":  {
                                             "main":  [
                                                          [
                                                              {
                                                                  "node":  "DLQ â†’ File",
                                                                  "type":  "main",
                                                                  "index":  0
                                                              }
                                                          ]
                                                      ]
                                         },
                        "DLQ â†’ File":  {
                                             "main":  [
                                                          [
                                                              {
                                                                  "node":  "Write DLQ",
                                                                  "type":  "main",
                                                                  "index":  0
                                                              }
                                                          ]
                                                      ]
                                         },
                        "Log Line":  {
                                         "main":  [
                                                      [
                                                          {
                                                              "node":  "Log â†’ NDJSON",
                                                              "type":  "main",
                                                              "index":  0
                                                          }
                                                      ]
                                                  ]
                                     },
                        "Log â†’ NDJSON":  {
                                               "main":  [
                                                            [
                                                                {
                                                                    "node":  "Append Log",
                                                                    "type":  "main",
                                                                    "index":  0
                                                                }
                                                            ]
                                                        ]
                                           },
                        "Append Log":  {
                                           "main":  [
                                                        [
                                                            {
                                                                "node":  "Proceed to Production?",
                                                                "type":  "main",
                                                                "index":  0
                                                            }
                                                        ]
                                                    ]
                                       },
                        "Proceed to Production?":  {
                                                     "main":  [
                                                                  [
                                                                      {
                                                                          "node":  "Script → Binary",
                                                                          "type":  "main",
                                                                          "index":  0
                                                                      }
                                                                  ],
                                                                  [
                                                                  ]
                                                              ]
                                                 },
                        "Script → Binary":  {
                                               "main":  [
                                                            [
                                                                {
                                                                    "node":  "Write /data script",
                                                                    "type":  "main",
                                                                    "index":  0
                                                                }
                                                            ]
                                                        ]
                                           },
                        "Write /data script":  {
                                                   "main":  [
                                                                [
                                                                    {
                                                                        "node":  "Thumbnail (magick)",
                                                                        "type":  "main",
                                                                        "index":  0
                                                                    },
                                                                    {
                                                                        "node":  "TTS (espeak-ng) â†’ WAV",
                                                                        "type":  "main",
                                                                        "index":  0
                                                                    }
                                                                ]
                                                            ]
                                               },
                        "Thumbnail (magick)":  {
                                                   "main":  [
                                                                [
                                                                    {
                                                                        "node":  "Mux to MP",
                                                                        "type":  "main",
                                                                        "index":  0
                                                                    }
                                                                ]
                                                            ]
                                               },
                        "TTS (espeak-ng) â†’ WAV":  {
                                                        "main":  [
                                                                     [
                                                                         {
                                                                             "node":  "Mux to MP",
                                                                             "type":  "main",
                                                                             "index":  0
                                                                         }
                                                                     ]
                                                                 ]
                                                    },
                        "Mux to MP":  {
                                          "main":  [
                                                       [
                                                           {
                                                               "node":  "Read MP4 (binary)",
                                                               "type":  "main",
                                                               "index":  0
                                                           }
                                                       ]
                                                   ]
                                      },
                        "Read MP4 (binary)":  {
                                                  "main":  [
                                                               [
                                                                   {
                                                                       "node":  "Merge Meta + MP",
                                                                       "type":  "main",
                                                                       "index":  0
                                                                   }
                                                               ]
                                                           ]
                                              },
                        "Set Upload Meta":  {
                                                "main":  [
                                                             [
                                                                 {
                                                                     "node":  "Merge Meta + MP",
                                                                     "type":  "main",
                                                                     "index":  1
                                                                 }
                                                             ]
                                                         ]
                                            },
                        "Merge Meta + MP":  {
                                                "main":  [
                                                             [
                                                                 {
                                                                     "node":  "Read YT Token",
                                                                     "type":  "main",
                                                                     "index":  0
                                                                 },
                                                                 {
                                                                     "node":  "Set Upload Meta",
                                                                     "type":  "main",
                                                                     "index":  0
                                                                 },
                                                                 {
                                                                     "node":  "Merge With Token",
                                                                     "type":  "main",
                                                                     "index":  0
                                                                 }
                                                             ]
                                                         ]
                                            },
                        "Read YT Token":  {
                                              "main":  [
                                                           [
                                                               {
                                                                   "node":  "Token â†’ JSON",
                                                                   "type":  "main",
                                                                   "index":  0
                                                               }
                                                           ]
                                                       ]
                                          },
                        "Token â†’ JSON":  {
                                               "main":  [
                                                            [
                                                                {
                                                                    "node":  "Merge With Token",
                                                                    "type":  "main",
                                                                    "index":  0
                                                                }
                                                            ]
                                                        ]
                                           },
                        "Merge With Token":  {
                                                 "main":  [
                                                              [
                                                                  {
                                                                      "node":  "YT Init Resumable",
                                                                      "type":  "main",
                                                                      "index":  0
                                                                  }
                                                              ]
                                                          ]
                                             },
                        "YT Init Resumable":  {
                                                  "main":  [
                                                               [
                                                                   {
                                                                       "node":  "YT Upload Chunk (full)",
                                                                       "type":  "main",
                                                                       "index":  0
                                                                   }
                                                               ]
                                                           ]
                                              },
                        "YT Upload Chunk (full)":  {
                                                       "main":  [
                                                                    [
                                                                        {
                                                                            "node":  "YT Parse Response",
                                                                            "type":  "main",
                                                                            "index":  0
                                                                        }
                                                                    ]
                                                                ]
                                                   },
                        "YT Parse Response":  {
                                                  "main":  [
                                                               [
                                                                   {
                                                                       "node":  "Set Quota Row",
                                                                       "type":  "main",
                                                                       "index":  0
                                                                   },
                                                                   {
                                                                       "node":  "Set Published Row",
                                                                       "type":  "main",
                                                                       "index":  0
                                                                   }
                                                               ]
                                                           ]
                                              },
                        "Set Quota Row":  {
                                              "main":  [
                                                           [
                                                               {
                                                                   "node":  "Append â†’ quota_log.csv",
                                                                   "type":  "main",
                                                                   "index":  0
                                                               }
                                                           ]
                                                       ]
                                          },
                        "Set Published Row":  {
                                                  "main":  [
                                                               [
                                                                   {
                                                                       "node":  "Append â†’ published.csv",
                                                                       "type":  "main",
                                                                       "index":  0
                                                                   },
                                                                   {
                                                                       "node":  "EPC Row",
                                                                       "type":  "main",
                                                                       "index":  0
                                                                   }
                                                               ]
                                                           ]
                                              },
                        "Append â†’ published.csv":  {
                                                         "main":  [
                                                                      [
                                                                          {
                                                                              "node":  "EPC Row",
                                                                              "type":  "main",
                                                                              "index":  0
                                                                          }
                                                                      ]
                                                                  ]
                                                     },
                        "EPC Row":  {
                                        "main":  [
                                                     [
                                                         {
                                                             "node":  "EPC â†’ File",
                                                             "type":  "main",
                                                             "index":  0
                                                         }
                                                     ]
                                                 ]
                                    },
                        "EPC â†’ File":  {
                                             "main":  [
                                                          [
                                                              {
                                                                  "node":  "Append EPC",
                                                                  "type":  "main",
                                                                  "index":  0
                                                              }
                                                          ]
                                                      ]
                                         },
                        "Append EPC":  {
                                           "main":  [
                                                        [
                                                            {
                                                                "node":  "PeerTube Upload",
                                                                "type":  "main",
                                                                "index":  0
                                                            }
                                                        ]
                                                    ]
                                       },
                        "PeerTube Upload":  {
                                                "main":  [
                                                             [
                                                                 {
                                                                     "node":  "Bluesky Post",
                                                                     "type":  "main",
                                                                     "index":  0
                                                                 }
                                                             ]
                                                         ]
                                            },
                        "Read published.csv (30d)":  {
                                                         "main":  [
                                                                      [
                                                                          {
                                                                              "node":  "Reweight Channels",
                                                                              "type":  "main",
                                                                              "index":  0
                                                                          }
                                                                      ]
                                                                  ]
                                                     },
                        "Reweight Channels":  {
                                                  "main":  [
                                                               [
                                                                   {
                                                                       "node":  "Update weights.csv",
                                                                       "type":  "main",
                                                                       "index":  0
                                                                   }
                                                               ]
                                                           ]
                                              },
                        "Research: Hacker News":  {
                                                      "main":  [
                                                                   [
                                                                       {
                                                                           "node":  "Research: Reddit Sparks",
                                                                           "type":  "main",
                                                                           "index":  0
                                                                       }
                                                                   ]
                                                               ]
                                                  },
                        "Research: Reddit Sparks":  {
                                                        "main":  [
                                                                     [
                                                                         {
                                                                             "node":  "Research: StackOverflow Hot",
                                                                             "type":  "main",
                                                                             "index":  0
                                                                         }
                                                                     ]
                                                                 ]
                                                    },
                        "Research: StackOverflow Hot":  {
                                                            "main":  [
                                                                         [
                                                                             {
                                                                                 "node":  "Research: Pain Synthesis",
                                                                                 "type":  "main",
                                                                                 "index":  0
                                                                             }
                                                                         ]
                                                                     ]
                                                        },
                        "Research: Pain Synthesis":  {
                                                         "main":  [
                                                                      [
                                                                          {
                                                                              "node":  "Ollama: Propose 9 Topics",
                                                                              "type":  "main",
                                                                              "index":  0
                                                                          }
                                                                      ]
                                                                  ]
                                                     },
                        "Hookstorm Reactor":  {
                                                  "main":  [
                                                               [
                                                                   {
                                                                       "node":  "Write Hookstorm",
                                                                       "type":  "main",
                                                                       "index":  0
                                                                   }
                                                               ]
                                                           ]
                                              },
                        "Reflex Thread Kit":  {
                                                  "main":  [
                                                               [
                                                                   {
                                                                       "node":  "Write Thread Kit",
                                                                       "type":  "main",
                                                                       "index":  0
                                                                   }
                                                               ]
                                                           ]
                                              },
                        "Referral Swarm Generator":  {
                                                         "main":  [
                                                                      [
                                                                          {
                                                                              "node":  "Write Referral Swarm",
                                                                              "type":  "main",
                                                                              "index":  0
                                                                          }
                                                                      ]
                                                                  ]
                                                     },
                        "Challenge Cascade Planner":  {
                                                          "main":  [
                                                                       [
                                                                           {
                                                                               "node":  "Write Challenge Cascade",
                                                                               "type":  "main",
                                                                               "index":  0
                                                                           }
                                                                       ]
                                                                   ]
                                                      },
                        "Dopamine Pingbacks Studio":  {
                                                          "main":  [
                                                                       [
                                                                           {
                                                                               "node":  "Write Dopamine Pingbacks",
                                                                               "type":  "main",
                                                                               "index":  0
                                                                           }
                                                                       ]
                                                                   ]
                                                      },
                        "Write Hookstorm":  {

                                            },
                        "Write Thread Kit":  {

                                             },
                        "Write Email Pulse":  {

                                              },
                        "Write Referral Swarm":  {

                                                 },
                        "Write Challenge Cascade":  {

                                                    },
                        "Write Dopamine Pingbacks":  {

                                                     },
                        "Email Pulse Composer":  {
                                                     "main":  [
                                                                  [
                                                                      {
                                                                          "node":  "Write Email Pulse",
                                                                          "type":  "main",
                                                                          "index":  0
                                                                      },
                                                                      {
                                                                          "node":  "Email Persona Matrix",
                                                                          "type":  "main",
                                                                          "index":  0
                                                                      }
                                                                  ]
                                                              ]
                                                 },
                        "Email Persona Matrix":  {
                                                     "main":  [
                                                                  [
                                                                      {
                                                                          "node":  "Email Variant Generator",
                                                                          "type":  "main",
                                                                          "index":  0
                                                                      }
                                                                  ]
                                                              ]
                                                 },
                        "Email Variant Generator":  {
                                                        "main":  [
                                                                     [
                                                                         {
                                                                             "node":  "Email Sequence Planner",
                                                                             "type":  "main",
                                                                             "index":  0
                                                                         },
                                                                         {
                                                                             "node":  "Write Email Variants",
                                                                             "type":  "main",
                                                                             "index":  0
                                                                         }
                                                                     ]
                                                                 ]
                                                    },
                        "Email Sequence Planner":  {
                                                       "main":  [
                                                                    [
                                                                        {
                                                                            "node":  "Email HTML Renderer",
                                                                            "type":  "main",
                                                                            "index":  0
                                                                        },
                                                                        {
                                                                            "node":  "Write Email Sequence",
                                                                            "type":  "main",
                                                                            "index":  0
                                                                        }
                                                                    ]
                                                                ]
                                                   },
                        "Email HTML Renderer":  {
                                                    "main":  [
                                                                 [
                                                                     {
                                                                         "node":  "Email Deliverability Scanner",
                                                                         "type":  "main",
                                                                         "index":  0
                                                                     },
                                                                     {
                                                                         "node":  "ESP Payload Builder",
                                                                         "type":  "main",
                                                                         "index":  0
                                                                     },
                                                                     {
                                                                         "node":  "Write Email HTML",
                                                                         "type":  "main",
                                                                         "index":  0
                                                                     }
                                                                 ]
                                                             ]
                                                },
                        "ESP Payload Builder":  {
                                                    "main":  [
                                                                 [
                                                                     {
                                                                         "node":  "Write ESP Payload",
                                                                         "type":  "main",
                                                                         "index":  0
                                                                     }
                                                                 ]
                                                             ]
                                                },
                        "Email Deliverability Scanner":  {
                                                             "main":  [
                                                                          [
                                                                              {
                                                                                  "node":  "Email QA Report",
                                                                                  "type":  "main",
                                                                                  "index":  0
                                                                              },
                                                                              {
                                                                                  "node":  "Write Email Deliverability",
                                                                                  "type":  "main",
                                                                                  "index":  0
                                                                              }
                                                                          ]
                                                                      ]
                                                         },
                        "Email QA Report":  {
                                                "main":  [
                                                             [
                                                                 {
                                                                     "node":  "Write Email QA",
                                                                     "type":  "main",
                                                                     "index":  0
                                                                 }
                                                             ]
                                                         ]
                                            }
                    },
    "pinData":  {

                },
    "meta":  {
                 "templateCredsSetupCompleted":  true
             }
}
