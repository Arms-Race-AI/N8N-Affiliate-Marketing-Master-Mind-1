  function flattenJsonArrays(obj, limit=6){
    const out=[];
    if(Array.isArray(obj)){ if(obj.length && typeof obj[0]==='object') out.push(obj); return out; }
    if(!isPlainObject(obj)) return out;
    for(const key of Object.keys(obj)){
      const val = obj[key];
      if(Array.isArray(val) && val.length && typeof val[0]==='object') out.push(val);
      if(out.length>=limit) break;
    }
    return out;
  }
  function ingestCandidate(ctx, kind, candidate, source){
    const slot = ctx.best[kind];
    if(candidate.score > slot.score){
      store.put(LSK[kind], candidate.norm);
      ctx.best[kind] = { score:candidate.score, rows:candidate.rows, detail:candidate.detail, source:source, ts: nowISO() };
      ctx.updated.add(kind);
      ctx.successes.push(`${kind} <= ${source}`);
      ctx.diag.push(`[OK] ${kind} updated from ${source} (${candidate.rows} rows)`);
    } else {
      ctx.diag.push(`[SKIP] ${kind} candidate from ${source} skipped (score ${candidate.score.toFixed(1)} <= ${slot.score.toFixed(1)})`);
    }
  }
  function extOf(name){ const lower = String(name||'').toLowerCase(); const idx = lower.lastIndexOf('.'); return idx===-1? '' : lower.slice(idx+1); }
  function guessMime(name){
    const ext = extOf(name);
    if(ext==='csv') return 'text/csv';
    if(ext==='tsv') return 'text/tab-separated-values';
    if(ext==='json' || ext==='geojson') return 'application/json';
    if(ext==='xlsx') return 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    if(ext==='xls') return 'application/vnd.ms-excel';
    if(ext==='kml') return 'application/vnd.google-earth.kml+xml';
    if(ext==='kmz') return 'application/vnd.google-earth.kmz';
    if(ext==='zip') return 'application/zip';
    return '';
  }
  async function flattenIngestFiles(fileList, ctx){
    const queue = Array.from(fileList||[]).map(f=>({ file:f, name:f.name, path:f.webkitRelativePath||f.name, origin:'direct' }));
    const out=[];
    w